This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
package.json
public/index.html
public/manifest.json
public/robots.txt
README.md
src/App.js
src/App.test.js
src/components/AppLayout.jsx
src/components/ColorPaletteControls.jsx
src/components/ImportExportControls.jsx
src/components/LayerControls.jsx
src/components/LayerList.jsx
src/components/NoiseVisualizer.jsx
src/components/SelectedLayerControls.jsx
src/components/ViewControls.jsx
src/index.js
src/logo.svg
src/reportWebVitals.js
src/setupTests.js
src/store/layersSlice.js
src/store/settingsSlice.js
src/store/store.js
src/utils.js

================================================================
Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "noisestack",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@dnd-kit/core": "^6.3.1",
    "@dnd-kit/sortable": "^10.0.0",
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@fontsource/roboto": "^5.2.5",
    "@mui/icons-material": "^6.4.8",
    "@mui/material": "^6.4.8",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/themes": "^3.2.1",
    "@reduxjs/toolkit": "^2.6.1",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@testing-library/user-event": "^13.5.0",
    "dnd-kit": "^0.0.2",
    "lucide-react": "^0.483.0",
    "radix-ui": "^1.1.3",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-redux": "^9.2.0",
    "react-scripts": "5.0.1",
    "three": "^0.174.0",
    "three-stdlib": "^2.35.14",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17"
  }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: src/App.js
================
// src/App.js
import React from "react";
import AppLayout from "./components/AppLayout";

function App() {
  return <AppLayout />;
}

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/components/AppLayout.jsx
================
// src/components/AppLayout.jsx
import React, {
  useState,
  useReducer,
  useEffect,
  useCallback,
  useRef,
} from "react";
import { useSelector, useDispatch } from "react-redux";
import {
  Box,
  Drawer,
  Divider,
  Toolbar,
  Typography,
  AppBar,
  Paper,
  Container,
  useTheme,
  Tooltip,
  IconButton,
  Popover,
  Slider,
  ToggleButtonGroup,
  ToggleButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Button,
  List,
  ListItem,
  ListItemText,
  TextField,
  Snackbar,
  Alert,
  Fade,
  Grid,
} from "@mui/material";
import NoiseVisualization from "../components/NoiseVisualizer";
import LayerList from "./LayerList";
import SelectedLayerControls from "./SelectedLayerControls";
import { setLayers } from "../store/layersSlice"; // Removed unused imports
import {
  setViewMode,
  setResolution as setSettingsResolution,
} from "../store/settingsSlice";

import LayersIcon from "@mui/icons-material/Layers";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import SaveIcon from "@mui/icons-material/Save";
import SettingsIcon from "@mui/icons-material/Settings";
import PaletteIcon from "@mui/icons-material/Palette";
import HelpOutlineIcon from "@mui/icons-material/HelpOutline";
import UndoIcon from "@mui/icons-material/Undo";
import RedoIcon from "@mui/icons-material/Redo";

import { addLayer, deleteLayer, updateLayer } from "../store/layersSlice";
import store from "../store/store";

import ColorPaletteControls from "./ColorPaletteControls";

const drawerWidth = 280;

// History reducer for Undo/Redo (No changes from previous version)
const historyReducer = (state, action) => {
  switch (action.type) {
    case "ADD_STATE":
      return {
        past: [...state.past, state.present],
        present: action.payload,
        future: [],
      };
    case "UNDO":
      if (state.past.length === 0) return state;
      return {
        past: state.past.slice(0, -1),
        present: state.past[state.past.length - 1],
        future: [state.present, ...state.future],
      };
    case "REDO":
      if (state.future.length === 0) return state;
      return {
        past: [...state.past, state.present],
        present: state.future[0],
        future: state.future.slice(1),
      };
    default:
      return state;
  }
};

const AppLayout = () => {
  const layers = useSelector((state) => state.layers.layers);
  const settings = useSelector((state) => state.settings);
  const dispatch = useDispatch();
  const theme = useTheme();

  const [history, dispatchHistory] = useReducer(historyReducer, {
    past: [],
    present: layers,
    future: [],
  });
  const [settingsAnchorEl, setSettingsAnchorEl] = useState(null);
  const [colorPaletteAnchorEl, setColorPaletteAnchorEl] = useState(null);
  const [helpOpen, setHelpOpen] = useState(false);
  const [openSnackbar, setOpenSnackbar] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState("");
  const [snackbarSeverity, setSnackbarSeverity] = useState("success");
  const [fileHover, setFileHover] = useState(false);

  const isFromHistory = useRef(false);

  const handleCloseSnackbar = (event, reason) => {
    if (reason === "clickaway") {
      return;
    }
    setOpenSnackbar(false);
  };

  // Undo/Redo Handlers
  const handleUndo = () => {
    isFromHistory.current = true; // Set ref before dispatch
    dispatchHistory({ type: "UNDO" });
  };

  const handleRedo = () => {
    isFromHistory.current = true; // Set ref before dispatch
    dispatchHistory({ type: "REDO" });
  };

  // Update layers from history
  useEffect(() => {
    if (isFromHistory.current) {
      dispatch(setLayers({ layers: history.present }));
      isFromHistory.current = false; // Reset ref after dispatch
    }
  }, [history, dispatch]);

  // Settings Menu Handlers
  const handleSettingsClick = (event) => {
    setSettingsAnchorEl(event.currentTarget);
  };

  const handleSettingsClose = () => {
    setSettingsAnchorEl(null);
  };

  // Color Palette Menu Handlers
  const handleColorPaletteClick = (event) => {
    setColorPaletteAnchorEl(event.currentTarget);
  };

  const handleColorPaletteClose = () => {
    setColorPaletteAnchorEl(null);
  };

  // Help Dialog Handlers
  const handleHelpOpen = () => {
    setHelpOpen(true);
  };

  const handleHelpClose = () => {
    setHelpOpen(false);
  };

  // View Mode Handler
  const handleViewModeChange = (event, newViewMode) => {
    if (newViewMode !== null) {
      dispatch(setViewMode(newViewMode));
    }
  };

  // Resolution Handler
  const handleResolutionChange = (event, newValue) => {
    dispatch(setSettingsResolution(newValue)); // Use the settingsSlice action
  };

  // Keyboard Shortcut Handler
  const handleKeyDown = useCallback(
    (event) => {
      const ctrlOrCmd = event.ctrlKey || event.metaKey;

      if (ctrlOrCmd && event.key === "z") {
        event.preventDefault(); // Prevent browser's default undo
        handleUndo();
      } else if (ctrlOrCmd && event.shiftKey && event.key === "Z") {
        event.preventDefault();
        handleRedo();
      } else if (ctrlOrCmd && event.key === "d") {
        event.preventDefault();
        const selectedLayerId = store.getState().layers.selectedLayerId;
        const selectedLayer = store
          .getState()
          .layers.layers.find((layer) => layer.id === selectedLayerId);

        if (selectedLayer) {
          const newLayer = {
            ...selectedLayer,
            id: Date.now(),
            name: `${selectedLayer.name} (Copy)`,
          };
          dispatch(addLayer(newLayer));
          dispatchHistory({
            type: "ADD_STATE",
            payload: [...store.getState().layers.layers, newLayer],
          });
        }
      } else if (event.key === "Delete") {
        const selectedLayerId = store.getState().layers.selectedLayerId;
        if (selectedLayerId) {
          dispatch(deleteLayer(selectedLayerId));
          dispatchHistory({
            type: "ADD_STATE",
            payload: store
              .getState()
              .layers.layers.filter((layer) => layer.id !== selectedLayerId),
          });
        }
      }
    },
    [dispatch]
  );

  useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [handleKeyDown]);

  // Add state to history after layer actions
  useEffect(() => {
    // Only add to history if the layers have actually changed AND it is not a history change itself.
    if (
      !isFromHistory.current &&
      JSON.stringify(layers) !== JSON.stringify(history.present)
    ) {
      dispatchHistory({ type: "ADD_STATE", payload: layers });
    }
  }, [layers, history.present]);

  const saveConfig = () => {
    try {
      const config = JSON.stringify(layers, null, 2); // Pretty print JSON
      const blob = new Blob([config], { type: "application/json" });
      const url = URL.createObjectURL(blob);

      const a = document.createElement("a");
      a.href = url;
      a.download = "noise-config.json";
      a.click();

      URL.revokeObjectURL(url);
      setSnackbarMessage("Configuration saved successfully!");
      setSnackbarSeverity("success");
      setOpenSnackbar(true);
    } catch (error) {
      console.error("Error saving config", error);
      setSnackbarMessage("Failed to save configuration.");
      setSnackbarSeverity("error");
      setOpenSnackbar(true);
    }
  };

  const loadConfig = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const loadedLayers = JSON.parse(e.target.result);
        dispatch(setLayers({ layers: loadedLayers }));
        setSnackbarMessage("Configuration loaded successfully!");
        setSnackbarSeverity("success");
        setOpenSnackbar(true);
      } catch (error) {
        console.error("Error loading configuration:", error);
        setSnackbarMessage("Invalid configuration file.");
        setSnackbarSeverity("error");
        setOpenSnackbar(true);
      }
    };
    reader.onerror = (error) => {
      console.error("File Read Error:", error);
      setSnackbarMessage("Error reading the file");
      setSnackbarSeverity("error");
      setOpenSnackbar(true);
    };

    reader.readAsText(file);
    // Reset the input value to allow loading the same file again
    event.target.value = null;
    setFileHover(false);
  };

  return (
    <Box sx={{ display: "flex", height: "100vh", overflow: "hidden" }}>
      <AppBar
        position="fixed"
        elevation={0}
        sx={{
          zIndex: (theme) => theme.zIndex.drawer + 1,
          boxShadow: theme.shadows[2],
          backgroundColor: theme.palette.background.paper,
          color: theme.palette.text.primary,
        }}
      >
        <Toolbar>
          <Typography
            variant="h5"
            component="h1"
            fontWeight="500"
            sx={{ flexGrow: 1 }}
          >
            ⛰️ noisey
          </Typography>

          {/* Undo/Redo Group */}
          <Box sx={{ display: "flex", alignItems: "center", mr: 1 }}>
            <Tooltip title="Undo (Ctrl/Cmd + Z)">
              <IconButton
                color="inherit"
                onClick={handleUndo}
                disabled={history.past.length === 0}
                size="small"
              >
                <UndoIcon />
              </IconButton>
            </Tooltip>
            <Tooltip title="Redo (Ctrl/Cmd + Shift + Z)">
              <IconButton
                color="inherit"
                onClick={handleRedo}
                disabled={history.future.length === 0}
                size="small"
              >
                <RedoIcon />
              </IconButton>
            </Tooltip>
          </Box>

          <Box sx={{ py: 1 }}>
            {" "}
            {/* Add padding around the divider */}
            <Divider
              orientation="vertical"
              flexItem
              sx={{ borderColor: "rgba(255, 255, 255, 0.2)" }}
            />{" "}
            {/* Lighter divider */}
          </Box>

          {/* File Operations Group */}
          <Box sx={{ display: "flex", alignItems: "center", mr: 1 }}>
            <Tooltip title="Export Configuration">
              <IconButton
                onClick={saveConfig}
                color="inherit"
                size="small"
                sx={{ mr: 1 }}
              >
                <SaveIcon />
              </IconButton>
            </Tooltip>
            <Tooltip title="Import Configuration">
              <IconButton
                color="inherit"
                onClick={() => document.getElementById("import-config").click()}
                size="small"
              >
                <CloudUploadIcon />
              </IconButton>
            </Tooltip>
            <input
              type="file"
              accept=".json"
              onChange={loadConfig}
              style={{ display: "none" }}
              id="import-config"
            />
          </Box>

          <Box sx={{ py: 1 }}>
            {" "}
            {/* Add padding around the divider */}
            <Divider
              orientation="vertical"
              flexItem
              sx={{ borderColor: "rgba(255, 255, 255, 0.2)" }}
            />{" "}
            {/* Lighter divider */}
          </Box>

          {/* View Mode Toggle */}
          <Box sx={{ display: "flex", alignItems: "center", mr: 1 }}>
            <ToggleButtonGroup
              value={settings.viewMode}
              exclusive
              onChange={handleViewModeChange}
              aria-label="View Mode"
              size="small"
            >
              <ToggleButton value="2d" aria-label="2D View">
                2D
              </ToggleButton>
              <ToggleButton value="3d" aria-label="3D View">
                3D
              </ToggleButton>
            </ToggleButtonGroup>
          </Box>

          <Box sx={{ py: 1 }}>
            {" "}
            {/* Add padding around the divider */}
            <Divider
              orientation="vertical"
              flexItem
              sx={{ borderColor: "rgba(255, 255, 255, 0.2)" }}
            />{" "}
            {/* Lighter divider */}
          </Box>

          {/* Settings Button and Popover */}
          <Box sx={{ display: "flex", alignItems: "center", mr: 1 }}>
            <Tooltip title="Settings">
              <IconButton
                color="inherit"
                onClick={handleSettingsClick}
                size="small"
                sx={{ mr: 1 }}
              >
                <SettingsIcon />
              </IconButton>
            </Tooltip>
            <Popover
              open={Boolean(settingsAnchorEl)}
              anchorEl={settingsAnchorEl}
              onClose={handleSettingsClose}
              anchorOrigin={{
                vertical: "bottom",
                horizontal: "right",
              }}
              transformOrigin={{
                vertical: "top",
                horizontal: "right",
              }}
            >
              <Box sx={{ p: 2, minWidth: 250 }}>
                <Typography variant="subtitle1" gutterBottom>
                  Resolution
                </Typography>
                <Slider
                  value={settings.resolution}
                  min={100}
                  max={800}
                  step={1}
                  onChange={handleResolutionChange}
                  valueLabelDisplay="auto"
                />
              </Box>
            </Popover>
          </Box>

          {/* Color Palette Button and Popover */}
          <Box sx={{ display: "flex", alignItems: "center", mr: 1 }}>
            <Tooltip title="Color Palette">
              <IconButton
                color="inherit"
                onClick={handleColorPaletteClick}
                size="small"
                sx={{ mr: 1 }}
              >
                <PaletteIcon />
              </IconButton>
            </Tooltip>
            <Popover
              open={Boolean(colorPaletteAnchorEl)}
              anchorEl={colorPaletteAnchorEl}
              onClose={handleColorPaletteClose}
              anchorOrigin={{
                vertical: "bottom",
                horizontal: "right",
              }}
              transformOrigin={{
                vertical: "top",
                horizontal: "right",
              }}
            >
              <ColorPaletteControls />
            </Popover>
          </Box>

          <Box sx={{ py: 1 }}>
            {" "}
            {/* Add padding around the divider */}
            <Divider
              orientation="vertical"
              flexItem
              sx={{ borderColor: "rgba(255, 255, 255, 0.2)" }}
            />{" "}
            {/* Lighter divider */}
          </Box>

          {/* Help Button and Dialog */}
          <Box sx={{ display: "flex", alignItems: "center" }}>
            <Tooltip title="Help">
              <IconButton color="inherit" onClick={handleHelpOpen} size="small">
                <HelpOutlineIcon />
              </IconButton>
            </Tooltip>
            <Dialog open={helpOpen} onClose={handleHelpClose}>
              <DialogTitle>Help</DialogTitle>
              <DialogContent>
                <DialogContentText>
                  <Typography variant="h6" gutterBottom>
                    Keyboard Shortcuts:
                  </Typography>
                  <List>
                    <ListItem>
                      <ListItemText
                        primary="Delete Layer"
                        secondary="Delete key"
                      />
                    </ListItem>
                    <ListItem>
                      <ListItemText
                        primary="Duplicate Layer"
                        secondary="Ctrl/Cmd + D"
                      />
                    </ListItem>
                    <ListItem>
                      <ListItemText primary="Undo" secondary="Ctrl/Cmd + Z" />
                    </ListItem>
                    <ListItem>
                      <ListItemText
                        primary="Redo"
                        secondary="Ctrl/Cmd + Shift + Z"
                      />
                    </ListItem>
                  </List>
                  <Typography variant="h6" gutterBottom>
                    General usage:
                  </Typography>
                  <Typography>
                    Use the layer panel on the left to manage your noise layers.
                    You can add, delete, reorder, and adjust the parameters of
                    each layer. The "Save & Load" section allows you to export
                    and import your layer configurations.
                  </Typography>

                  <Typography variant="body1" sx={{ mt: 2 }}>
                    Click the icons on top bar to switch views, adjust settings
                    or change color palettes.
                  </Typography>
                </DialogContentText>
              </DialogContent>
              <DialogActions>
                <Button onClick={handleHelpClose}>Close</Button>
              </DialogActions>
            </Dialog>
          </Box>
        </Toolbar>
      </AppBar>
      <Drawer
        variant="permanent"
        sx={{
          width: drawerWidth,
          flexShrink: 0,
          [`& .MuiDrawer-paper`]: {
            width: drawerWidth,
            boxSizing: "border-box",
            backgroundColor: theme.palette.background.default,
            boxShadow: theme.shadows[2],
            border: "none",
          },
        }}
      >
        <Toolbar />
        <Box
          sx={{
            overflow: "auto",
            p: 2,
            height: "100%",
            display: "flex",
            flexDirection: "column",
          }}
        >
          <Box sx={{ height: "40vh", overflowY: "auto", mb: 2 }}>
            <LayerList />
          </Box>
          <Divider sx={{ my: 2 }} />
          <SelectedLayerControls />
        </Box>
      </Drawer>
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          p: 0,
          backgroundColor: theme.palette.background.default,
          overflow: "hidden",
          display: "flex",
          flexDirection: "column",
        }}
      >
        <Toolbar />
        <Container
          maxWidth="xl"
          sx={{ flexGrow: 1, py: 4, display: "flex", position: "relative" }}
        >
          <Paper
            elevation={2}
            sx={{
              width: "100%",
              height: "100%",
              p: 3,
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              borderRadius: theme.shape.borderRadius * 1.5,
              backgroundColor: theme.palette.background.paper,
              overflow: "hidden",
              position: "relative",
            }}
          >
            <NoiseVisualization layers={layers} settings={settings} />
          </Paper>
        </Container>
      </Box>
      <Snackbar
        open={openSnackbar}
        autoHideDuration={4000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
        TransitionComponent={Fade}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbarSeverity}
          variant="filled"
          sx={{
            width: "100%",
            borderRadius: theme.shape.borderRadius * 1.5,
            boxShadow: theme.shadows[6],
          }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default AppLayout;

================
File: src/components/ColorPaletteControls.jsx
================
// src/components/ColorPaletteControls.jsx
import React from "react";
import { useSelector, useDispatch } from "react-redux";
import {
  setHypsometricRanges,
  updateHypsometricRangeColor,
  toggleHypsometricTinting,
} from "../store/settingsSlice";

import {
  Box,
  Typography,
  List,
  ListItem,
  TextField,
  Switch,
  FormControlLabel,
  Divider,
} from "@mui/material";

const ColorPaletteControls = () => {
  const dispatch = useDispatch();
  const { hypsometricTinting, hypsometricRanges } = useSelector(
    (state) => state.settings
  );

  const handleColorChange = (index, color) => {
    dispatch(updateHypsometricRangeColor({ index, color }));
  };

  const handleToggleTinting = () => {
    dispatch(toggleHypsometricTinting());
  };

  return (
    <Box sx={{ p: 2, minWidth: 300 }}>
      <Typography variant="h6" gutterBottom>
        Color Palette
      </Typography>
      <FormControlLabel
        control={
          <Switch checked={hypsometricTinting} onChange={handleToggleTinting} />
        }
        label="Color by Height"
      />
      <Divider sx={{ my: 1 }} />

      {hypsometricTinting && (
        <List>
          {hypsometricRanges.map((range, index) => (
            <ListItem key={index} divider>
              <TextField
                label="Name"
                value={range.name}
                disabled // No range edition yet.
                variant="outlined"
                size="small"
                sx={{ mr: 1, width: "40%" }}
              />
              <TextField
                label="Start"
                type="number"
                value={range.start}
                disabled // No range edition yet.
                variant="outlined"
                size="small"
                sx={{ mr: 1, width: "20%" }}
              />
              <TextField
                label="End"
                type="number"
                value={range.end}
                disabled // No range edition yet.
                variant="outlined"
                size="small"
                sx={{ mr: 1, width: "20%" }}
              />
              <TextField
                type="color"
                value={range.color}
                onChange={(e) => handleColorChange(index, e.target.value)}
                variant="outlined"
                size="small"
                sx={{ width: "20%" }}
              />
            </ListItem>
          ))}
        </List>
      )}
    </Box>
  );
};

export default ColorPaletteControls;

================
File: src/components/ImportExportControls.jsx
================
// src/components/ImportExportControls.jsx
import React from "react";
import { useDispatch, useSelector } from "react-redux";
import { setLayers } from "../store/layersSlice";
import {
  Button,
  Box,
  Typography,
  Snackbar,
  Alert,
  Grid,
  Paper,
  Divider,
  useTheme,
  alpha,
  Fade,
  Stack,
  Tooltip,
} from "@mui/material";
import DownloadIcon from "@mui/icons-material/Download";
import UploadIcon from "@mui/icons-material/Upload";
import SaveIcon from "@mui/icons-material/Save";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import BackupIcon from "@mui/icons-material/Backup";

const ImportExportControls = () => {
  const dispatch = useDispatch();
  const theme = useTheme();
  const layers = useSelector((state) => state.layers.layers);
  const [openSnackbar, setOpenSnackbar] = React.useState(false);
  const [snackbarMessage, setSnackbarMessage] = React.useState("");
  const [snackbarSeverity, setSnackbarSeverity] = React.useState("success");
  const [fileHover, setFileHover] = React.useState(false);

  const handleCloseSnackbar = (event, reason) => {
    if (reason === "clickaway") {
      return;
    }
    setOpenSnackbar(false);
  };

  const saveConfig = () => {
    try {
      const config = JSON.stringify(layers, null, 2); // Pretty print JSON
      const blob = new Blob([config], { type: "application/json" });
      const url = URL.createObjectURL(blob);

      const a = document.createElement("a");
      a.href = url;
      a.download = "noise-config.json";
      a.click();

      URL.revokeObjectURL(url);
      setSnackbarMessage("Configuration saved successfully!");
      setSnackbarSeverity("success");
      setOpenSnackbar(true);
    } catch (error) {
      console.error("Error saving config", error);
      setSnackbarMessage("Failed to save configuration.");
      setSnackbarSeverity("error");
      setOpenSnackbar(true);
    }
  };

  const loadConfig = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const loadedLayers = JSON.parse(e.target.result);
        dispatch(setLayers({ layers: loadedLayers }));
        setSnackbarMessage("Configuration loaded successfully!");
        setSnackbarSeverity("success");
        setOpenSnackbar(true);
      } catch (error) {
        console.error("Error loading configuration:", error);
        setSnackbarMessage("Invalid configuration file.");
        setSnackbarSeverity("error");
        setOpenSnackbar(true);
      }
    };
    reader.onerror = (error) => {
      console.error("File Read Error:", error);
      setSnackbarMessage("Error reading the file");
      setSnackbarSeverity("error");
      setOpenSnackbar(true);
    };

    reader.readAsText(file);
    // Reset the input value to allow loading the same file again
    event.target.value = null;
    setFileHover(false);
  };

  return (
    <Paper
      elevation={0}
      sx={{
        mt: 2, // Reduced margin
        borderRadius: theme.shape.borderRadius * 1.5,
        backgroundColor: alpha(theme.palette.background.paper, 0.8),
        border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
        boxShadow: `0 2px 20px ${alpha(theme.palette.common.black, 0.05)}`,
        overflow: "hidden",
      }}
    >
      <Box
        display="flex"
        alignItems="center"
        p={2} // Reduced padding
        pb={1} // Reduced padding
        sx={{
          backgroundColor: alpha(theme.palette.primary.main, 0.05),
          borderBottom: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
        }}
      >
        <SaveIcon
          sx={{
            mr: 1,
            color: theme.palette.primary.main,
            fontSize: 20, // Reduced size
          }}
        />
        <Typography variant="h6" fontWeight="500" sx={{ fontSize: "1rem" }}>
          Save & Load
        </Typography>
      </Box>

      <Box p={2}>
        {" "}
        {/* Reduced padding */}
        <Typography
          variant="body2"
          color="text.secondary"
          mb={2} // Reduced margin
          sx={{
            borderLeft: `3px solid ${alpha(theme.palette.info.main, 0.7)}`,
            pl: 1, // Reduced padding
            py: 0.5,
            backgroundColor: alpha(theme.palette.info.main, 0.05),
            borderRadius: `0 ${theme.shape.borderRadius}px ${theme.shape.borderRadius}px 0`,
            fontSize: "0.75rem",
          }}
        >
          Save your current configuration or load a previously saved setup.
        </Typography>
        <Stack spacing={2}>
          {" "}
          {/* Reduced spacing */}
          <Tooltip title="Save current configuration to a JSON file">
            <Button
              variant="contained"
              fullWidth
              startIcon={<DownloadIcon />}
              onClick={saveConfig}
              sx={{
                py: 1, // Reduced padding
                borderRadius: theme.shape.borderRadius * 1.5,
                backgroundColor: theme.palette.success.main,
                "&:hover": {
                  backgroundColor: theme.palette.success.dark,
                },
                textTransform: "none",
                fontWeight: 500,
                boxShadow: theme.shadows[2],
                fontSize: "0.8rem", // Reduced font size
              }}
            >
              Export
            </Button>
          </Tooltip>
          <Paper
            component="label"
            elevation={0}
            onMouseEnter={() => setFileHover(true)}
            onMouseLeave={() => setFileHover(false)}
            sx={{
              p: 1, // Reduced padding
              border: `2px dashed ${
                fileHover
                  ? theme.palette.primary.main
                  : alpha(theme.palette.divider, 0.3)
              }`,
              borderRadius: theme.shape.borderRadius * 1.5,
              transition: theme.transitions.create(
                ["border-color", "box-shadow"],
                {
                  duration: theme.transitions.duration.short,
                }
              ),
              cursor: "pointer",
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              backgroundColor: fileHover
                ? alpha(theme.palette.primary.main, 0.05)
                : "transparent",
              boxShadow: fileHover
                ? `0 0 10px ${alpha(theme.palette.primary.main, 0.2)}`
                : "none",
            }}
          >
            <input
              type="file"
              accept=".json"
              onChange={loadConfig}
              style={{ display: "none" }}
            />

            <CloudUploadIcon
              color="primary"
              sx={{
                fontSize: 32, // Reduced icon size
                mb: 0.5, // Reduced margin
                transition: theme.transitions.create(["transform"], {
                  duration: theme.transitions.duration.short,
                }),
                transform: fileHover ? "scale(1.1)" : "scale(1)",
              }}
            />

            <Typography
              variant="body1"
              fontWeight="500"
              align="center"
              gutterBottom
              sx={{ fontSize: "0.8rem" }}
            >
              Drag & drop or click to import
            </Typography>

            <Typography
              variant="body2"
              color="text.secondary"
              align="center"
              sx={{ fontSize: "0.7rem" }}
            >
              Upload a saved configuration
            </Typography>
          </Paper>
        </Stack>
      </Box>

      <Snackbar
        open={openSnackbar}
        autoHideDuration={4000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
        TransitionComponent={Fade}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbarSeverity}
          variant="filled"
          sx={{
            width: "100%",
            borderRadius: theme.shape.borderRadius * 1.5,
            boxShadow: theme.shadows[6],
          }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Paper>
  );
};

export default ImportExportControls;

================
File: src/components/LayerControls.jsx
================
// src/components/LayerControls.jsx (Modified for consistent button colors)
import React from "react";
import { useDispatch } from "react-redux";
import {
  updateLayer,
  deleteLayer,
  toggleLayerVisibility,
  addLayer,
} from "../store/layersSlice";
import {
  Box,
  Typography,
  Slider,
  IconButton,
  TextField,
  Grid,
  Paper,
  Tooltip,
  Divider,
  useTheme,
  alpha,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
} from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import VisibilityIcon from "@mui/icons-material/Visibility";
import VisibilityOffIcon from "@mui/icons-material/VisibilityOff";
import TuneIcon from "@mui/icons-material/Tune";
import FileCopyIcon from "@mui/icons-material/FileCopy";
import LayersIcon from "@mui/icons-material/Layers";

const LayerControls = ({ layer }) => {
  const dispatch = useDispatch();
  const theme = useTheme();

  const handleUpdate = (updates) => {
    dispatch(updateLayer({ id: layer.id, updates }));
  };

  const handleDelete = () => {
    dispatch(deleteLayer(layer.id));
  };

  const handleToggleVisibility = () => {
    dispatch(toggleLayerVisibility(layer.id));
  };

  const handleDuplicate = () => {
    const newLayer = {
      ...layer,
      id: Date.now(),
      name: `${layer.name} (Copy)`,
    };
    dispatch(addLayer(newLayer));
  };

  return (
    <Paper
      elevation={2}
      sx={{
        p: 2, // Reduced padding here
        mb: 2, // Reduced margin here
        borderRadius: theme.shape.borderRadius * 1.5,
        border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
      }}
    >
      <Grid container spacing={1}>
        {/* Reduced spacing between grid items */}
        <Grid
          item
          xs={12}
          display="flex"
          justifyContent="space-between"
          alignItems="center"
          sx={{ mb: 0.5 }} // Reduced margin
        >
          <Box display="flex" alignItems="center">
            <TuneIcon sx={{ mr: 1, color: theme.palette.primary.main }} />
            <Typography
              variant="h6"
              fontWeight="500"
              sx={{ fontSize: "1rem", color: theme.palette.text.primary }}
            >
              {layer.name}
            </Typography>
          </Box>
          <Box>
            <Tooltip title={layer.visible ? "Hide Layer" : "Show Layer"}>
              <IconButton
                onClick={handleToggleVisibility}
                size="small"
                //color={layer.visible ? "primary" : "default"} Removed
                sx={{
                  mr: 1,
                  color: theme.palette.primary.main, // Consistent color
                  "&:hover": {
                    backgroundColor: alpha(theme.palette.primary.main, 0.1), // Add hover effect
                  },
                }} // Reduced margin
              >
                {layer.visible ? <VisibilityIcon /> : <VisibilityOffIcon />}
              </IconButton>
            </Tooltip>
            <Tooltip title="Duplicate Layer">
              <IconButton
                onClick={handleDuplicate}
                size="small"
                sx={{
                  color: theme.palette.primary.main, // Use primary color
                  "&:hover": {
                    backgroundColor: alpha(theme.palette.primary.main, 0.1), // Use primary color for hover
                  },
                  mr: 1, // Reduced margin
                }}
              >
                <FileCopyIcon />
              </IconButton>
            </Tooltip>
            <Tooltip title="Delete Layer">
              <IconButton
                onClick={handleDelete}
                size="small"
                sx={{
                  color: theme.palette.error.main,
                  "&:hover": {
                    backgroundColor: alpha(theme.palette.error.main, 0.1),
                  },
                }}
              >
                <DeleteIcon />
              </IconButton>
            </Tooltip>
          </Box>
        </Grid>
        <Grid item xs={12}>
          <Divider sx={{ mb: 1 }} /> {/* Reduced margin */}
        </Grid>

        {/* Seed (Moved to top) */}
        <Grid item xs={12}>
          <Typography
            variant="body2"
            fontWeight="500"
            gutterBottom
            color="text.secondary"
          >
            Seed
          </Typography>
          <TextField
            type="number"
            value={layer.seed}
            onChange={(e) =>
              handleUpdate({ seed: parseInt(e.target.value) || 0 })
            }
            variant="outlined"
            fullWidth
            size="small"
            InputProps={{
              sx: {
                borderRadius: theme.shape.borderRadius * 1.5,
                border: `1px solid ${alpha(theme.palette.divider, 0.2)}`,
                padding: "4px 8px", // Reduced padding
                height: "32px",
              },
            }}
          />
        </Grid>

        <Grid item xs={12}>
          <Typography
            variant="body2"
            fontWeight="500"
            gutterBottom
            id={`scale-slider-${layer.id}`}
            color="text.secondary"
            sx={{ mb: -0.5 }} // Negative margin to pull slider closer
          >
            Scale
          </Typography>
          <Slider
            value={layer.scale}
            min={1}
            max={100}
            step={1}
            onChange={(event, value) => handleUpdate({ scale: value })}
            valueLabelDisplay="auto"
            aria-labelledby={`scale-slider-${layer.id}`}
            sx={{
              color: theme.palette.primary.main,
              height: 2, // Reduced height
              "& .MuiSlider-thumb": {
                width: 12, // Reduced thumb size
                height: 12,
              },
            }}
          />
        </Grid>
        <Grid item xs={12}>
          <Typography
            variant="body2"
            fontWeight="500"
            gutterBottom
            id={`octaves-slider-${layer.id}`}
            color="text.secondary"
            sx={{ mb: -0.5 }}
          >
            Octaves
          </Typography>
          <Slider
            value={layer.octaves}
            min={1}
            max={8}
            step={1}
            onChange={(event, value) => handleUpdate({ octaves: value })}
            valueLabelDisplay="auto"
            aria-labelledby={`octaves-slider-${layer.id}`}
            sx={{
              color: theme.palette.primary.main,
              height: 2,
              "& .MuiSlider-thumb": {
                width: 12,
                height: 12,
              },
            }}
          />
        </Grid>
        <Grid item xs={12}>
          <Typography
            variant="body2"
            fontWeight="500"
            gutterBottom
            id={`persistence-slider-${layer.id}`}
            color="text.secondary"
            sx={{ mb: -0.5 }}
          >
            Persistence
          </Typography>
          <Slider
            value={layer.persistence * 100}
            min={0}
            max={100}
            step={1}
            onChange={(event, value) =>
              handleUpdate({ persistence: value / 100 })
            }
            valueLabelDisplay="auto"
            aria-labelledby={`persistence-slider-${layer.id}`}
            sx={{
              color: theme.palette.primary.main,
              height: 2,
              "& .MuiSlider-thumb": {
                width: 12,
                height: 12,
              },
            }}
          />
        </Grid>
        <Grid item xs={12}>
          <Typography
            variant="body2"
            fontWeight="500"
            gutterBottom
            id={`lacunarity-slider-${layer.id}`}
            color="text.secondary"
            sx={{ mb: -0.5 }}
          >
            Lacunarity
          </Typography>
          <Slider
            value={layer.lacunarity * 100}
            min={100}
            max={300}
            step={1}
            onChange={(event, value) =>
              handleUpdate({ lacunarity: value / 100 })
            }
            valueLabelDisplay="auto"
            aria-labelledby={`lacunarity-slider-${layer.id}`}
            sx={{
              color: theme.palette.primary.main,
              height: 2,
              "& .MuiSlider-thumb": {
                width: 12,
                height: 12,
              },
            }}
          />
        </Grid>

        {/* Bias */}
        <Grid item xs={12}>
          <Typography
            variant="body2"
            fontWeight="500"
            gutterBottom
            id={`bias-slider-${layer.id}`}
            color="text.secondary"
            sx={{ mb: -0.5 }}
          >
            Bias
          </Typography>
          <Slider
            value={layer.bias * 100}
            min={-100}
            max={100}
            step={1}
            onChange={(event, value) => handleUpdate({ bias: value / 100 })}
            valueLabelDisplay="auto"
            aria-labelledby={`bias-slider-${layer.id}`}
            sx={{
              color: theme.palette.primary.main,
              height: 2,
              "& .MuiSlider-thumb": {
                width: 12,
                height: 12,
              },
            }}
          />
        </Grid>

        {/* Blend Mode */}
        <Grid item xs={12}>
          <FormControl fullWidth size="small">
            <InputLabel
              id={`blend-mode-label-${layer.id}`}
              sx={{
                fontSize: "0.8rem",
              }}
            >
              Blend Mode
            </InputLabel>
            <Select
              labelId={`blend-mode-label-${layer.id}`}
              value={layer.blendMode}
              label="Blend Mode"
              onChange={(event) =>
                handleUpdate({ blendMode: event.target.value })
              }
              sx={{
                borderRadius: theme.shape.borderRadius * 1.5,
                fontSize: "0.8rem",
                "& .MuiSelect-select": {
                  py: 0.5,
                },
              }}
            >
              <MenuItem value="normal" sx={{ fontSize: "0.8rem" }}>
                Normal
              </MenuItem>
              <MenuItem value="add" sx={{ fontSize: "0.8rem" }}>
                Add
              </MenuItem>
              <MenuItem value="subtract" sx={{ fontSize: "0.8rem" }}>
                Subtract
              </MenuItem>
              <MenuItem value="multiply" sx={{ fontSize: "0.8rem" }}>
                Multiply
              </MenuItem>
              <MenuItem value="screen" sx={{ fontSize: "0.8rem" }}>
                Screen
              </MenuItem>
            </Select>
          </FormControl>
        </Grid>

        <Grid item xs={12}>
          <Typography
            variant="body2"
            fontWeight="500"
            gutterBottom
            id={`weight-slider-${layer.id}`}
            color="text.secondary"
            sx={{ mb: -0.5 }}
          >
            Weight
          </Typography>
          <Slider
            value={layer.weight * 100}
            min={0}
            max={100}
            step={1}
            onChange={(event, value) => handleUpdate({ weight: value / 100 })}
            valueLabelDisplay="auto"
            aria-labelledby={`weight-slider-${layer.id}`}
            sx={{
              color: theme.palette.primary.main,
              height: 2,
              "& .MuiSlider-thumb": {
                width: 12,
                height: 12,
              },
            }}
          />
        </Grid>
      </Grid>
    </Paper>
  );
};

export default LayerControls;

================
File: src/components/LayerList.jsx
================
// src/components/LayerList.jsx (Modified for text field within ListItemButton)
import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  addLayer,
  setSelectedLayerId,
  clearSelectedLayerId,
  deleteLayer,
  toggleLayerVisibility,
  moveLayer,
  updateLayer,
} from "../store/layersSlice";
import {
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  IconButton,
  ListItemSecondaryAction,
  Box,
  Typography,
  Paper,
  Button,
  Tooltip,
  useTheme,
  alpha,
  TextField,
} from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import LayersIcon from "@mui/icons-material/Layers";
import DeleteIcon from "@mui/icons-material/Delete";
import VisibilityIcon from "@mui/icons-material/Visibility";
import VisibilityOffIcon from "@mui/icons-material/VisibilityOff";
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
} from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";

import { useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import DragIndicatorIcon from "@mui/icons-material/DragIndicator";

// CORRECT: SortableItem is a separate component
const SortableItem = ({
  layer,
  selectedLayerId,
  handleLayerSelect,
  handleDoubleClick,
  editLayerId,
  tempName,
  handleNameChange,
  handleNameBlur,
  handleNameKeyDown,
  handleToggleVisibility,
  handleDelete,
}) => {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ id: layer.id });

  const theme = useTheme(); //  CALL useTheme here

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    zIndex: transform ? 1 : "auto",
    opacity: isDragging ? 0.5 : 1,
  };

  return (
    <ListItem
      ref={setNodeRef}
      style={style}
      component={Paper}
      elevation={selectedLayerId === layer.id ? 3 : 1}
      sx={{
        mb: 1.5,
        p: 0,
        borderRadius: theme.shape.borderRadius * 1.5, // Corrected: Use theme here
        transition: theme.transitions.create(
          // Corrected: Use theme here
          ["box-shadow", "background-color"],
          {
            duration: theme.transitions.duration.short,
          }
        ),
        border:
          selectedLayerId === layer.id
            ? `1px solid ${alpha(theme.palette.primary.main, 0.5)}` // Corrected: Use theme here
            : `1px solid ${alpha(theme.palette.divider, 0.1)}`, // Corrected: Use theme here
        backgroundColor:
          selectedLayerId === layer.id
            ? alpha(theme.palette.primary.main, 0.05) // Corrected: Use theme here
            : theme.palette.background.paper, // Corrected: Use theme here
        overflow: "hidden",
      }}
    >
      <ListItemButton
        onClick={() => handleLayerSelect(layer.id)}
        onDoubleClick={() => handleDoubleClick(layer.id, layer.name)}
        sx={{
          py: 1,
          "&:hover": {
            backgroundColor:
              selectedLayerId === layer.id
                ? alpha(theme.palette.primary.main, 0.1) // Corrected: Use theme here
                : theme.palette.action.hover, // Corrected: Use theme here
          },
          //display: "flex", // Removed, not necessary.
          width: "100%", // Ensure it takes the full width
        }}
      >
        <IconButton
          {...attributes}
          {...listeners}
          size="small"
          sx={{
            mr: 1,
            color: theme.palette.action.disabled, // Corrected: Use theme here
          }}
        >
          <DragIndicatorIcon />
        </IconButton>

        {editLayerId === layer.id ? (
          <TextField
            value={tempName}
            onChange={handleNameChange}
            onBlur={handleNameBlur}
            onKeyDown={handleNameKeyDown}
            autoFocus
            size="small"
            sx={{
              width: "60%", // Adjusted width
            }}
            inputProps={{
              style: {
                padding: 0, // Remove padding to align with ListItemText
                fontSize: "0.85rem",
              },
            }}
            variant="standard" // No border when editing.
          />
        ) : (
          <ListItemText
            primary={
              <Typography
                variant="body1"
                fontWeight={selectedLayerId === layer.id ? 500 : 400}
                sx={{
                  color:
                    selectedLayerId === layer.id
                      ? theme.palette.primary.main // Corrected: Use theme here
                      : theme.palette.text.primary, // Corrected: Use theme here
                  fontSize: "0.85rem",
                  ml: 0, // Remove default margin
                }}
              >
                {layer.name}
              </Typography>
            }
          />
        )}

        <ListItemSecondaryAction sx={{ right: 8 }}>
          <Tooltip title={layer.visible ? "Hide Layer" : "Show Layer"}>
            <IconButton
              edge="end"
              onClick={(e) => handleToggleVisibility(e, layer.id)}
              size="small"
              // Removed color prop
              sx={{
                mr: 1,
                color: theme.palette.primary.main, // Consistent color
                "&:hover": {
                  backgroundColor: alpha(theme.palette.primary.main, 0.1), // Add hover effect
                },
              }}
            >
              {layer.visible ? <VisibilityIcon /> : <VisibilityOffIcon />}
            </IconButton>
          </Tooltip>
          <Tooltip title="Delete Layer">
            <IconButton
              edge="end"
              onClick={(e) => handleDelete(e, layer.id)}
              size="small"
              sx={{
                color: theme.palette.error.main,
                "&:hover": {
                  backgroundColor: alpha(theme.palette.error.main, 0.1), // Add hover effect
                },
              }}
            >
              <DeleteIcon />
            </IconButton>
          </Tooltip>
        </ListItemSecondaryAction>
      </ListItemButton>
    </ListItem>
  );
};

const LayerList = () => {
  const dispatch = useDispatch();
  const layers = useSelector((state) => state.layers.layers);
  const selectedLayerId = useSelector((state) => state.layers.selectedLayerId);
  const theme = useTheme();
  const [editLayerId, setEditLayerId] = useState(null);
  const [tempName, setTempName] = useState("");

  // ... (rest of your handler functions: handleAddLayer, handleLayerSelect, etc.) ...
  const handleAddLayer = () => {
    dispatch(
      addLayer({
        id: Date.now(),
        name: `Layer ${layers.length + 1}`,
        scale: 20,
        octaves: 3,
        persistence: 0.5,
        lacunarity: 2.0,
        seed: Math.floor(Math.random() * 1000),
        weight: 0.5,
        visible: true,
        bias: 0, // Add bias
        blendMode: "normal", // Add blendMode
      })
    );
  };

  const handleLayerSelect = (layerId) => {
    if (selectedLayerId === layerId) {
      dispatch(clearSelectedLayerId());
    } else {
      dispatch(setSelectedLayerId(layerId));
    }
    setEditLayerId(null); // Exit edit mode if clicking a different layer
    setTempName("");
  };

  const handleDelete = (e, layerId) => {
    e.stopPropagation();
    dispatch(deleteLayer(layerId));
    setEditLayerId(null); // Exit edit mode if deleting
    setTempName("");
  };

  const handleToggleVisibility = (e, layerId) => {
    e.stopPropagation();
    dispatch(toggleLayerVisibility(layerId));
  };

  const handleDoubleClick = (layerId, layerName) => {
    setEditLayerId(layerId);
    setTempName(layerName);
  };

  const handleNameChange = (e) => {
    setTempName(e.target.value);
  };

  const handleNameBlur = () => {
    if (tempName.trim() !== "") {
      dispatch(updateLayer({ id: editLayerId, updates: { name: tempName } }));
    }
    setEditLayerId(null);
    setTempName("");
  };

  const handleNameKeyDown = (e) => {
    if (e.key === "Enter") {
      handleNameBlur();
    }
  };

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    }),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  const handleDragEnd = (event) => {
    const { active, over } = event;

    if (active.id !== over?.id) {
      const oldIndex = layers.findIndex((layer) => layer.id === active.id);
      const newIndex = layers.findIndex((layer) => layer.id === over.id);
      dispatch(moveLayer({ oldIndex, newIndex }));
    }
    setEditLayerId(null);
    setTempName("");
  };

  return (
    <Box>
      <Box
        display="flex"
        justifyContent="space-between"
        alignItems="center"
        mb={1}
      >
        <Typography
          variant="h6"
          fontWeight="500"
          sx={{
            display: "flex",
            alignItems: "center",
            fontSize: "1rem",
          }}
        >
          <LayersIcon
            sx={{
              mr: 1,
              color: theme.palette.primary.main,
            }}
          />
          Layers
        </Typography>
        <Button
          variant="contained"
          color="primary"
          startIcon={<AddIcon />}
          onClick={handleAddLayer}
          sx={{
            borderRadius: theme.shape.borderRadius * 1.5,
            boxShadow: theme.shadows[2],
            textTransform: "none",
            fontSize: "0.8rem",
            padding: "4px 12px",
          }}
        >
          Add Layer
        </Button>
      </Box>

      <DndContext
        sensors={sensors}
        collisionDetection={closestCenter}
        onDragEnd={handleDragEnd}
      >
        <SortableContext
          items={layers.map((layer) => layer.id)}
          strategy={verticalListSortingStrategy}
        >
          <List sx={{ mb: 1 }}>
            {layers.map((layer) => (
              <SortableItem
                key={layer.id}
                layer={layer} // Pass the layer data
                selectedLayerId={selectedLayerId} // Pass other props
                handleLayerSelect={handleLayerSelect}
                handleDoubleClick={handleDoubleClick}
                editLayerId={editLayerId}
                tempName={tempName}
                handleNameChange={handleNameChange}
                handleNameBlur={handleNameBlur}
                handleNameKeyDown={handleNameKeyDown}
                handleToggleVisibility={handleToggleVisibility}
                handleDelete={handleDelete}
              />
            ))}
          </List>
        </SortableContext>
      </DndContext>
      {layers.length === 0 && (
        <Paper
          elevation={0}
          sx={{
            p: 2, // Reduced padding
            textAlign: "center",
            border: `1px dashed ${alpha(theme.palette.divider, 0.3)}`,
            borderRadius: theme.shape.borderRadius * 1.5,
          }}
        >
          <LayersIcon
            sx={{
              fontSize: 32, // Reduced icon size
              color: alpha(theme.palette.text.secondary, 0.5),
              mb: 0.5, // Reduced margin
            }}
          />
          <Typography variant="body2" color="text.secondary">
            No layers available
          </Typography>
          <Button
            variant="outlined"
            color="primary"
            startIcon={<AddIcon />}
            onClick={handleAddLayer}
            sx={{
              mt: 1, // Reduced margin
              borderRadius: theme.shape.borderRadius * 1.5,
              textTransform: "none",
              fontSize: "0.8rem", // Reduced font size
              padding: "4px 12px", // Reduced padding
            }}
          >
            Add Your First Layer
          </Button>
        </Paper>
      )}
    </Box>
  );
};

export default LayerList;

================
File: src/components/NoiseVisualizer.jsx
================
// src/components/NoiseVisualizer.jsx (Modified height style)
import React, { useState, useEffect, useRef } from "react";
import * as THREE from "three";
import { OrbitControls } from "three-stdlib";
import { generatePerlinNoise } from "../utils";
import { Box } from "@mui/material";

const NoiseVisualizer = ({ layers, settings }) => {
  const canvasRef = useRef(null);
  const threeContainerRef = useRef(null);
  const [rendererInstance, setRendererInstance] = useState(null);
  const [controls, setControls] = useState(null); // Keep controls state

  const { viewMode, resolution, hypsometricTinting, hypsometricRanges } =
    settings; // Get hypsometricRanges

  useEffect(() => {
    // Cleanup previous instances
    if (rendererInstance) {
      rendererInstance.dispose();
      rendererInstance.forceContextLoss();
      if (rendererInstance.domElement) {
        rendererInstance.domElement.parentNode?.removeChild(
          rendererInstance.domElement
        ); //clean up dom element
      }
      setRendererInstance(null); // Clear renderer instance
    }

    if (controls) {
      // Dispose of controls
      controls.dispose();
      setControls(null);
    }

    if (viewMode === "2d") {
      render2D();
    } else {
      render3D();
    }
  }, [layers, viewMode, resolution, hypsometricTinting, hypsometricRanges]); // Add hypsometricRanges as a dependency

  const render2D = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext("2d");
    if (!ctx) return; // Check if context is available

    ctx.clearRect(0, 0, resolution, resolution);

    const imageData = ctx.createImageData(resolution, resolution);
    const data = imageData.data;

    const visibleLayers = layers.filter((layer) => layer.visible);

    if (visibleLayers.length === 0) {
      ctx.fillStyle = "#ddd";
      ctx.fillRect(0, 0, resolution, resolution);
      ctx.fillStyle = "#999";
      ctx.font = "16px sans-serif";
      ctx.textAlign = "center";
      ctx.fillText("No visible layers", resolution / 2, resolution / 2);
      return;
    }

    // Pre-calculate all noise layers
    const noiseLayers = visibleLayers.map((layer) => ({
      noise: generatePerlinNoise(
        resolution,
        resolution,
        layer.scale,
        layer.octaves,
        layer.persistence,
        layer.lacunarity,
        layer.seed
      ),
      blendMode: layer.blendMode,
      weight: layer.weight,
      bias: layer.bias,
    }));

    for (let i = 0; i < resolution * resolution; i++) {
      let r = 0,
        g = 0,
        b = 0;

      for (let j = 0; j < noiseLayers.length; j++) {
        let { noise, blendMode, weight, bias } = noiseLayers[j];
        let value = noise[i];
        value = Math.max(0, Math.min(1, value + bias)); // Apply bias and clamp
        let pixelValue = Math.floor(value * 255);

        let layerR, layerG, layerB;

        if (hypsometricTinting) {
          // Apply hypsometric tinting using the ranges
          let foundRange = false;
          for (let k = 0; k < hypsometricRanges.length; k++) {
            const range = hypsometricRanges[k];
            if (pixelValue >= range.start && pixelValue <= range.end) {
              const color = parseInt(range.color.substring(1), 16); // Convert hex to integer
              layerR = (color >> 16) & 255;
              layerG = (color >> 8) & 255;
              layerB = color & 255;
              foundRange = true;
              break; // Once we find a range, stop searching
            }
          }
          if (!foundRange) {
            //if no range check for default color
            layerR = pixelValue;
            layerG = pixelValue;
            layerB = pixelValue;
          }
        } else {
          // Default grayscale
          layerR = pixelValue;
          layerG = pixelValue;
          layerB = pixelValue;
        }

        // Apply blending modes
        switch (blendMode) {
          case "add":
            r += layerR * weight;
            g += layerG * weight;
            b += layerB * weight;
            break;
          case "subtract":
            r -= layerR * weight;
            g -= layerG * weight;
            b -= layerB * weight;
            break;
          case "multiply":
            r = (r * layerR * weight) / 255;
            g = (g * layerG * weight) / 255;
            b = (b * layerB * weight) / 255;
            break;
          case "screen":
            r = 255 - ((255 - r) * (255 - layerR * weight)) / 255;
            g = 255 - ((255 - g) * (255 - layerG * weight)) / 255;
            b = 255 - ((255 - b) * (255 - layerB * weight)) / 255;
            break;
          default: // 'normal'
            r += layerR * weight;
            g += layerG * weight;
            b += layerB * weight;
        }
      }
      //normalize layer color and aplly
      let totalWeight = visibleLayers.reduce(
        (acc, layer) => acc + layer.weight,
        0
      );
      r = Math.min(255, Math.max(0, r / totalWeight));
      g = Math.min(255, Math.max(0, g / totalWeight));
      b = Math.min(255, Math.max(0, b / totalWeight));
      const index = i * 4;
      data[index] = r;
      data[index + 1] = g;
      data[index + 2] = b;
      data[index + 3] = 255;
    }

    ctx.putImageData(imageData, 0, 0);
  };
  // ... (render3D remains unchanged) ...
  const render3D = () => {
    const container = threeContainerRef.current;
    if (!container) return;
    // Cleanup previous Three.js scene, crucial for preventing memory leaks
    while (container.firstChild) {
      container.removeChild(container.firstChild);
    }
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000); // Aspect ratio set to 1
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(resolution, resolution); // Use resolution for both dimensions
    container.appendChild(renderer.domElement);
    setRendererInstance(renderer); // Set the renderer instance *after* appending
    camera.position.set(5, 5, 5);
    camera.lookAt(0, 0, 0);
    const ambientLight = new THREE.AmbientLight(0x404040);
    scene.add(ambientLight);
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(1, 1, 1);
    scene.add(directionalLight);
    const visibleLayers = layers.filter((layer) => layer.visible);
    if (visibleLayers.length === 0) {
      const geometry = new THREE.PlaneGeometry(10, 10);
      const material = new THREE.MeshBasicMaterial({ color: 0xdddddd });
      const plane = new THREE.Mesh(geometry, material);
      scene.add(plane);
    } else {
      const gridSize = 50;
      const terrainSize = 10;
      const geometry = new THREE.PlaneGeometry(
        terrainSize,
        terrainSize,
        gridSize - 1,
        gridSize - 1
      );
      const combinedNoise = new Array(gridSize * gridSize).fill(0);
      let totalWeight = 0;
      visibleLayers.forEach((layer) => {
        const noise = generatePerlinNoise(
          gridSize,
          gridSize,
          layer.scale / 10, // Adjust scale for 3D
          layer.octaves,
          layer.persistence,
          layer.lacunarity,
          layer.seed
        );
        for (let i = 0; i < noise.length; i++) {
          // Apply bias and clamp:
          const biasedNoise = Math.max(0, Math.min(1, noise[i] + layer.bias));
          combinedNoise[i] += biasedNoise * layer.weight;
        }
        totalWeight += layer.weight;
      });
      if (totalWeight > 0) {
        for (let i = 0; i < combinedNoise.length; i++) {
          combinedNoise[i] /= totalWeight;
        }
      }
      const vertices = geometry.attributes.position.array;
      for (let i = 0, j = 0; i < vertices.length; i += 3, j++) {
        const height = combinedNoise[j];
        vertices[i + 2] = height * 2; // Adjust height scale
      }
      geometry.computeVertexNormals();
      const material = new THREE.MeshStandardMaterial({
        color: 0x808080,
        wireframe: false,
        flatShading: true, // Keep flat shading
      });
      const terrain = new THREE.Mesh(geometry, material);
      terrain.rotation.x = -Math.PI / 2;
      scene.add(terrain);
    }
    const newControls = new OrbitControls(camera, renderer.domElement);
    setControls(newControls);
    const animate = () => {
      if (!rendererInstance) return; // prevent animate from running if renderer is null
      requestAnimationFrame(animate);
      newControls.update();
      renderer.render(scene, camera);
    };
    animate();
  };

  return (
    <Box sx={{ position: "relative", height: "100%" }}>
      {" "}
      {/* Added height: 100% */}
      {viewMode === "2d" ? (
        <canvas
          ref={canvasRef}
          width={resolution}
          height={resolution}
          style={{
            width: "100%", // Make it responsive, take full width
            height: "100%", // Changed to 100%
            objectFit: "contain", // Ensure the canvas content is scaled correctly
            boxShadow: "0px 0px 50px rgba(0, 0, 0, 0.5)",
          }}
        />
      ) : (
        <Box
          ref={threeContainerRef}
          sx={{
            width: "100%",
            height: "100%", // Changed to 100%
            boxShadow: "0px 0px 50px rgba(0, 0, 0, 0.5)",
          }}
        />
      )}
    </Box>
  );
};

export default NoiseVisualizer;

================
File: src/components/SelectedLayerControls.jsx
================
// src/components/SelectedLayerControls.jsx (No changes needed)
import React from "react";
import { useSelector } from "react-redux";
import LayerControls from "./LayerControls";
import { Box, Typography } from "@mui/material";

const SelectedLayerControls = () => {
  const selectedLayerId = useSelector((state) => state.layers.selectedLayerId);
  const layers = useSelector((state) => state.layers.layers);
  const selectedLayer = layers.find((layer) => layer.id === selectedLayerId);

  return (
    <Box mt={4}>
      {selectedLayer ? (
        <LayerControls layer={selectedLayer} />
      ) : (
        <Typography
          variant="body2"
          color="text.secondary"
          align="center"
          mt={2}
        >
          No layer selected. Select a layer to view its controls.
        </Typography>
      )}
    </Box>
  );
};

export default SelectedLayerControls;

================
File: src/components/ViewControls.jsx
================
// src/components/ViewControls.jsx
import React from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  setViewMode,
  setResolution,
  toggleHypsometricTinting,
} from "../store/settingsSlice";
import {
  Box,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormGroup,
  FormControlLabel,
  Switch,
  Slider,
  Typography,
  Tooltip,
  Accordion,
  AccordionSummary,
  AccordionDetails,
} from "@mui/material";

const ViewControls = () => {
  const dispatch = useDispatch();
  const { viewMode, resolution, hypsometricTinting } = useSelector(
    (state) => state.settings
  );

  const handleViewModeChange = (event) => {
    dispatch(setViewMode(event.target.value));
  };

  const handleResolutionChange = (event, newValue) => {
    dispatch(setResolution(newValue));
  };

  const handleHypsometricToggle = (event) => {
    dispatch(toggleHypsometricTinting());
  };

  return (
    <Box>
      <FormControl fullWidth size="small" sx={{ mb: 2 }}>
        <InputLabel id="view-mode-label">View Mode</InputLabel>
        <Select
          labelId="view-mode-label"
          id="view-mode-select"
          value={viewMode}
          label="View Mode"
          onChange={handleViewModeChange}
        >
          <MenuItem value="2d">2D</MenuItem>
          <MenuItem value="3d">3D</MenuItem>
        </Select>
      </FormControl>

      <Typography id="resolution-slider" gutterBottom>
        Resolution
      </Typography>
      <Tooltip
        title={
          <span>
            Resolution: {resolution}x{resolution}
          </span>
        }
        placement="bottom"
      >
        <Slider
          value={resolution}
          min={100}
          max={800}
          step={1}
          onChange={handleResolutionChange}
          valueLabelDisplay="auto"
          aria-labelledby="resolution-slider"
        />
      </Tooltip>
    </Box>
  );
};

export default ViewControls;

================
File: src/index.js
================
// src/index.js
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { Provider } from "react-redux";
import store from "./store/store";
import { ThemeProvider, createTheme } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";
import "@fontsource/roboto/300.css";
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";

const darkTheme = createTheme({
  palette: {
    mode: "dark",
    primary: {
      main: "#7dcc4a",
    },
    secondary: {
      main: "#f48fb1",
    },
    background: {
      default: "#121212",
      paper: "#1e1e1e",
    },
  },
  typography: {
    // ... (Typography settings - you can adjust font sizes here globally if needed)
    h1: {
      fontSize: "2.5rem",
      fontWeight: 500,
      marginBottom: "1rem",
    },
    h2: {
      fontSize: "2rem",
      fontWeight: 500,
      marginBottom: "0.75rem",
    },
    h3: {
      fontSize: "1.75rem",
      fontWeight: 500,
      marginBottom: "0.5rem",
    },
    h4: {
      fontSize: "1.5rem",
      fontWeight: 500,
    },
    h5: {
      fontSize: "1.25rem",
      fontWeight: 500,
    },
    h6: {
      // Reduced for drawer titles
      fontSize: "1rem",
      fontWeight: 500,
    },
    subtitle1: {
      fontSize: "1rem", // Slightly smaller
      fontWeight: 400,
    },
    body1: {
      // Reduced for main text
      fontSize: "0.85rem",
    },
    body2: {
      // Reduced for secondary text
      fontSize: "0.75rem",
    },
  },
  spacing: 6, // Reduced default spacing to 6px (from 8px)
});

// Global scrollbar styling (best to do it centrally)
const GlobalStyles = () => (
  <style>
    {`
      ::-webkit-scrollbar {
        width: 8px; /* Width of the scrollbar */
      }

      ::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1); /* Track color */
        border-radius: 10px;
      }

      ::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.3); /* Thumb color */
        border-radius: 10px;
        &:hover {
          background: rgba(255, 255, 255, 0.5);
        }
      }
    `}
  </style>
);

ReactDOM.createRoot(document.getElementById("root")).render(
  //<React.StrictMode> Removed parent div
  <Provider store={store}>
    <ThemeProvider theme={darkTheme}>
      <CssBaseline />
      <GlobalStyles />
      <App />
    </ThemeProvider>
  </Provider>
  // </React.StrictMode>
);

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: src/store/layersSlice.js
================
// src/store/layersSlice.js (Modified to include hypsometric settings)
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  layers: [
    {
      id: 1,
      name: "Base Layer",
      scale: 30,
      octaves: 4,
      persistence: 0.5,
      lacunarity: 2.0,
      seed: 42,
      weight: 1.0,
      visible: true,
      bias: 0, // Initial bias
      blendMode: "normal", // Initial blend mode
    },
  ],
  selectedLayerId: null,
};

const layersSlice = createSlice({
  name: "layers",
  initialState,
  reducers: {
    addLayer: (state, action) => {
      state.layers.push(action.payload);
    },
    deleteLayer: (state, action) => {
      const layerId = action.payload;
      state.layers = state.layers.filter((layer) => layer.id !== layerId);
      // Clear selection if the deleted layer was selected
      if (state.selectedLayerId === layerId) {
        state.selectedLayerId = null;
      }
    },
    updateLayer: (state, action) => {
      const { id, updates } = action.payload;
      const layerIndex = state.layers.findIndex((layer) => layer.id === id);
      if (layerIndex !== -1) {
        state.layers[layerIndex] = { ...state.layers[layerIndex], ...updates };
      }
    },
    toggleLayerVisibility: (state, action) => {
      const layerId = action.payload;
      const layer = state.layers.find((layer) => layer.id === layerId);
      if (layer) {
        layer.visible = !layer.visible;
      }
    },
    setLayers: (state, action) => {
      // Expecting action.payload to be { layers: [...] }
      state.layers = action.payload.layers;
      state.selectedLayerId = null; // Clear selection on load
    },
    setSelectedLayerId: (state, action) => {
      state.selectedLayerId = action.payload;
    },
    clearSelectedLayerId: (state) => {
      state.selectedLayerId = null;
    },
    moveLayer: (state, action) => {
      const { oldIndex, newIndex } = action.payload;
      state.layers = arrayMove(state.layers, oldIndex, newIndex);
    },
  },
});

export const {
  addLayer,
  deleteLayer,
  updateLayer,
  toggleLayerVisibility,
  setLayers,
  setSelectedLayerId,
  clearSelectedLayerId,
  moveLayer, // Export moveLayer
} = layersSlice.actions;
export default layersSlice.reducer;

// Utility function from @dnd-kit (put this in utils.js or directly in layersSlice.js)
function arrayMove(array, from, to) {
  const newArray = array.slice();
  newArray.splice(
    to < 0 ? newArray.length + to : to,
    0,
    newArray.splice(from, 1)[0]
  );
  return newArray;
}

================
File: src/store/settingsSlice.js
================
// src/store/settingsSlice.js (Modified for hypsometric settings)
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  viewMode: "2d",
  resolution: 400,
  hypsometricTinting: true,
  hypsometricRanges: [
    // Initial ranges
    { name: "Deep Water", start: 0, end: 50, color: "#00008B" }, // Dark Blue
    { name: "Shallow Water", start: 51, end: 84, color: "#4169E1" }, // Royal Blue
    { name: "Lowlands", start: 85, end: 127, color: "#228B22" }, // Forest Green
    { name: "Midlands", start: 128, end: 169, color: "#90EE90" }, // Light Green
    { name: "Highlands", start: 170, end: 211, color: "#F0E68C" }, // Khaki
    { name: "Mountains", start: 212, end: 255, color: "#A0522D" }, // Sienna
  ],
};

const settingsSlice = createSlice({
  name: "settings",
  initialState,
  reducers: {
    setViewMode: (state, action) => {
      state.viewMode = action.payload;
    },
    setResolution: (state, action) => {
      state.resolution = action.payload;
    },
    toggleHypsometricTinting: (state) => {
      state.hypsometricTinting = !state.hypsometricTinting;
    },
    setHypsometricRanges: (state, action) => {
      state.hypsometricRanges = action.payload;
    },
    updateHypsometricRangeColor: (state, action) => {
      const { index, color } = action.payload;
      if (index >= 0 && index < state.hypsometricRanges.length) {
        state.hypsometricRanges[index].color = color;
      }
    },
  },
});

export const {
  setViewMode,
  setResolution,
  toggleHypsometricTinting,
  setHypsometricRanges,
  updateHypsometricRangeColor,
} = settingsSlice.actions;
export default settingsSlice.reducer;

================
File: src/store/store.js
================
// src/store/store.js (No changes needed)
import { configureStore } from "@reduxjs/toolkit";
import layersReducer from "./layersSlice";
import settingsReducer from "./settingsSlice";

const store = configureStore({
  reducer: {
    layers: layersReducer,
    settings: settingsReducer,
  },
});

export default store;

================
File: src/utils.js
================
// src/utils.js
// --- Custom Perlin Noise Implementation ---

const p = new Uint8Array(512);

const grad3 = [
  [1, 1, 0],
  [-1, 1, 0],
  [1, -1, 0],
  [-1, -1, 0],
  [1, 0, 1],
  [-1, 0, 1],
  [1, 0, -1],
  [-1, 0, -1],
  [0, 1, 1],
  [0, -1, 1],
  [0, 1, -1],
  [0, -1, -1],
];

function dot(g, x, y, z) {
  return g[0] * x + g[1] * y + g[2] * z;
}

function initPermutationTable(seed = 0) {
  const rng = new Random(seed);

  const permutation = new Uint8Array(256);
  for (let i = 0; i < 256; i++) {
    permutation[i] = i;
  }

  for (let i = 255; i > 0; i--) {
    const j = Math.floor(rng.next() * (i + 1));
    [permutation[i], permutation[j]] = [permutation[j], permutation[i]];
  }

  for (let i = 0; i < 256; i++) {
    p[i] = p[i + 256] = permutation[i];
  }
}

function perlin2D(x, y, seed = 0) {
  const X = Math.floor(x) & 255;
  const Y = Math.floor(y) & 255;
  const xf = x - Math.floor(x);
  const yf = y - Math.floor(y);
  const u = fade(xf);
  const v = fade(yf);
  const A = p[X] + Y;
  const B = p[X + 1] + Y;
  const gradAA = grad(p[A], xf, yf);
  const gradBA = grad(p[B], xf - 1, yf);
  const gradAB = grad(p[A + 1], xf, yf - 1);
  const gradBB = grad(p[B + 1], xf - 1, yf - 1);
  const ix0 = lerp(gradAA, gradBA, u);
  const ix1 = lerp(gradAB, gradBB, u);
  return lerp(ix0, ix1, v);
}

function fade(t) {
  return t * t * t * (t * (t * 6 - 15) + 10);
}

function lerp(a, b, t) {
  return a + t * (b - a);
}

function grad(hash, x, y) {
  const h = hash & 15;
  const u = h < 8 ? x : y;
  const v = h < 4 ? y : h === 12 || h === 14 ? x : 0;
  return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);
}

class Random {
  constructor(seed) {
    this.seed = seed % 2147483647;
    if (this.seed <= 0) this.seed += 2147483646;
  }

  next() {
    this.seed = (this.seed * 16807) % 2147483647;
    return this.seed / 2147483647;
  }
}

export const generatePerlinNoise = (
  width,
  height,
  scale,
  octaves,
  persistence,
  lacunarity,
  seed
) => {
  initPermutationTable(seed);
  const noise = [];

  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      let nx = x / scale;
      let ny = y / scale;
      let value = 0;
      let frequency = 1;
      let amplitude = 1;
      let maxAmplitude = 0;

      for (let i = 0; i < octaves; i++) {
        value += perlin2D(nx * frequency, ny * frequency, seed) * amplitude;
        maxAmplitude += amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
      }

      noise.push((value / maxAmplitude + 1) / 2);
    }
  }
  return noise;
};



================================================================
End of Codebase
================================================================
