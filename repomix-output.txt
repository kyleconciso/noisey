This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
noisestack/.gitignore
noisestack/package.json
noisestack/public/index.html
noisestack/public/manifest.json
noisestack/public/robots.txt
noisestack/README.md
noisestack/src/App.js
noisestack/src/App.test.js
noisestack/src/components/AppLayout.jsx
noisestack/src/components/ImportExportControls.jsx
noisestack/src/components/LayerControls.jsx
noisestack/src/components/LayerList.jsx
noisestack/src/components/NoiseVisualizer.jsx
noisestack/src/components/SelectedLayerControls.jsx
noisestack/src/components/ViewControls.jsx
noisestack/src/index.js
noisestack/src/logo.svg
noisestack/src/reportWebVitals.js
noisestack/src/setupTests.js
noisestack/src/store/layersSlice.js
noisestack/src/store/settingsSlice.js
noisestack/src/store/store.js
noisestack/src/utils.js

================================================================
Files
================================================================

================
File: noisestack/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: noisestack/package.json
================
{
  "name": "noisestack",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@dnd-kit/core": "^6.3.1",
    "@dnd-kit/sortable": "^10.0.0",
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@fontsource/roboto": "^5.2.5",
    "@mui/icons-material": "^6.4.8",
    "@mui/material": "^6.4.8",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/themes": "^3.2.1",
    "@reduxjs/toolkit": "^2.6.1",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@testing-library/user-event": "^13.5.0",
    "dnd-kit": "^0.0.2",
    "lucide-react": "^0.483.0",
    "radix-ui": "^1.1.3",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-redux": "^9.2.0",
    "react-scripts": "5.0.1",
    "three": "^0.174.0",
    "three-stdlib": "^2.35.14",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17"
  }
}

================
File: noisestack/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: noisestack/public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: noisestack/public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: noisestack/README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: noisestack/src/App.js
================
// src/App.js
import React from "react";
import AppLayout from "./components/AppLayout";

function App() {
  return <AppLayout />;
}

export default App;

================
File: noisestack/src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: noisestack/src/components/AppLayout.jsx
================
// src/components/AppLayout.jsx
import React from "react";
import { useSelector } from "react-redux";
import {
  Box,
  Drawer,
  Divider,
  Toolbar,
  Typography,
  AppBar,
  Paper,
  Container,
  useTheme,
} from "@mui/material";
import NoiseVisualization from "../components/NoiseVisualizer";
import LayerList from "./LayerList";
import SelectedLayerControls from "./SelectedLayerControls";
import ImportExportControls from "./ImportExportControls";
import ViewControls from "./ViewControls";

const drawerWidth = 320; // Slightly wider for better spacing

const AppLayout = () => {
  const layers = useSelector((state) => state.layers);
  const settings = useSelector((state) => state.settings);
  const theme = useTheme();

  return (
    <Box sx={{ display: "flex", height: "100vh", overflow: "hidden" }}>
      <AppBar
        position="fixed"
        elevation={0}
        sx={{
          zIndex: (theme) => theme.zIndex.drawer + 1,
          boxShadow: theme.shadows[2],
          backgroundColor: theme.palette.background.paper,
          color: theme.palette.text.primary,
        }}
      >
        <Toolbar>
          <Typography
            variant="h5"
            component="h1"
            fontWeight="500"
            sx={{ mr: 4 }}
          >
            Noise Generator
          </Typography>
          <ViewControls />
        </Toolbar>
      </AppBar>
      <Drawer
        variant="permanent"
        sx={{
          width: drawerWidth,
          flexShrink: 0,
          [`& .MuiDrawer-paper`]: {
            width: drawerWidth,
            boxSizing: "border-box",
            backgroundColor: (theme) => theme.palette.background.default,
            boxShadow: theme.shadows[2],
            border: "none",
          },
        }}
      >
        <Toolbar />
        <Box
          sx={{
            overflow: "auto",
            padding: theme.spacing(3),
            height: "100%",
            display: "flex",
            flexDirection: "column",
          }}
        >
          <LayerList />
          <Divider sx={{ my: 3 }} />
          <Box sx={{ flexGrow: 1, overflowY: "auto" }}>
            <SelectedLayerControls />
          </Box>
        </Box>
      </Drawer>
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          p: 0,
          backgroundColor: (theme) => theme.palette.background.default,
          overflow: "hidden",
          display: "flex",
          flexDirection: "column",
        }}
      >
        <Toolbar />
        <Container maxWidth="xl" sx={{ flexGrow: 1, py: 4, display: "flex" }}>
          <Paper
            elevation={2}
            sx={{
              width: "100%",
              height: "100%",
              p: 3,
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              borderRadius: theme.shape.borderRadius * 1.5,
              backgroundColor: theme.palette.background.paper,
              overflow: "hidden",
            }}
          >
            <NoiseVisualization layers={layers.layers} settings={settings} />
          </Paper>
        </Container>
      </Box>
    </Box>
  );
};

export default AppLayout;

================
File: noisestack/src/components/ImportExportControls.jsx
================
// src/components/ImportExportControls.jsx
import React from "react";
import { useDispatch, useSelector } from "react-redux";
import { setLayers } from "../store/layersSlice";
import {
  Button,
  Box,
  Typography,
  Snackbar,
  Alert,
  Grid,
  Paper,
  Divider,
  useTheme,
  alpha,
  Fade,
  Stack,
  Tooltip,
} from "@mui/material";
import DownloadIcon from "@mui/icons-material/Download";
import UploadIcon from "@mui/icons-material/Upload";
import SaveIcon from "@mui/icons-material/Save";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import BackupIcon from "@mui/icons-material/Backup";

const ImportExportControls = () => {
  const dispatch = useDispatch();
  const theme = useTheme();
  const layers = useSelector((state) => state.layers.layers);
  const [openSnackbar, setOpenSnackbar] = React.useState(false);
  const [snackbarMessage, setSnackbarMessage] = React.useState("");
  const [snackbarSeverity, setSnackbarSeverity] = React.useState("success");
  const [fileHover, setFileHover] = React.useState(false);

  const handleCloseSnackbar = (event, reason) => {
    if (reason === "clickaway") {
      return;
    }
    setOpenSnackbar(false);
  };

  const saveConfig = () => {
    try {
      const config = JSON.stringify(layers, null, 2); // Pretty print JSON
      const blob = new Blob([config], { type: "application/json" });
      const url = URL.createObjectURL(blob);

      const a = document.createElement("a");
      a.href = url;
      a.download = "noise-config.json";
      a.click();

      URL.revokeObjectURL(url);
      setSnackbarMessage("Configuration saved successfully!");
      setSnackbarSeverity("success");
      setOpenSnackbar(true);
    } catch (error) {
      console.error("Error saving config", error);
      setSnackbarMessage("Failed to save configuration.");
      setSnackbarSeverity("error");
      setOpenSnackbar(true);
    }
  };

  const loadConfig = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const loadedLayers = JSON.parse(e.target.result);
        dispatch(setLayers({ layers: loadedLayers }));
        setSnackbarMessage("Configuration loaded successfully!");
        setSnackbarSeverity("success");
        setOpenSnackbar(true);
      } catch (error) {
        console.error("Error loading configuration:", error);
        setSnackbarMessage("Invalid configuration file.");
        setSnackbarSeverity("error");
        setOpenSnackbar(true);
      }
    };
    reader.onerror = (error) => {
      console.error("File Read Error:", error);
      setSnackbarMessage("Error reading the file");
      setSnackbarSeverity("error");
      setOpenSnackbar(true);
    };

    reader.readAsText(file);
    // Reset the input value to allow loading the same file again
    event.target.value = null;
    setFileHover(false);
  };

  return (
    <Paper
      elevation={0}
      sx={{
        mt: 4,
        borderRadius: theme.shape.borderRadius * 1.5,
        backgroundColor: alpha(theme.palette.background.paper, 0.8),
        border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
        boxShadow: `0 2px 20px ${alpha(theme.palette.common.black, 0.05)}`,
        overflow: "hidden",
      }}
    >
      <Box
        display="flex"
        alignItems="center"
        p={3}
        pb={2}
        sx={{
          backgroundColor: alpha(theme.palette.primary.main, 0.05),
          borderBottom: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
        }}
      >
        <SaveIcon
          sx={{
            mr: 1.5,
            color: theme.palette.primary.main,
            fontSize: 24,
          }}
        />
        <Typography variant="h6" fontWeight="500">
          Save & Load
        </Typography>
      </Box>

      <Box p={3}>
        <Typography
          variant="body2"
          color="text.secondary"
          mb={3}
          sx={{
            borderLeft: `3px solid ${alpha(theme.palette.info.main, 0.7)}`,
            pl: 2,
            py: 0.5,
            backgroundColor: alpha(theme.palette.info.main, 0.05),
            borderRadius: `0 ${theme.shape.borderRadius}px ${theme.shape.borderRadius}px 0`,
          }}
        >
          Save your current configuration to a file or load a previously saved
          setup.
        </Typography>

        <Stack spacing={3}>
          <Tooltip title="Save current configuration to a JSON file">
            <Button
              variant="contained"
              fullWidth
              startIcon={<DownloadIcon />}
              onClick={saveConfig}
              sx={{
                py: 1.5,
                borderRadius: theme.shape.borderRadius * 1.5,
                backgroundColor: theme.palette.success.main,
                "&:hover": {
                  backgroundColor: theme.palette.success.dark,
                },
                textTransform: "none",
                fontWeight: 500,
                boxShadow: theme.shadows[2],
              }}
            >
              Export Configuration
            </Button>
          </Tooltip>

          <Paper
            component="label"
            elevation={0}
            onMouseEnter={() => setFileHover(true)}
            onMouseLeave={() => setFileHover(false)}
            sx={{
              p: 2,
              border: `2px dashed ${
                fileHover
                  ? theme.palette.primary.main
                  : alpha(theme.palette.divider, 0.3)
              }`,
              borderRadius: theme.shape.borderRadius * 1.5,
              transition: theme.transitions.create(
                ["border-color", "box-shadow"],
                {
                  duration: theme.transitions.duration.short,
                }
              ),
              cursor: "pointer",
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              backgroundColor: fileHover
                ? alpha(theme.palette.primary.main, 0.05)
                : "transparent",
              boxShadow: fileHover
                ? `0 0 10px ${alpha(theme.palette.primary.main, 0.2)}`
                : "none",
            }}
          >
            <input
              type="file"
              accept=".json"
              onChange={loadConfig}
              style={{ display: "none" }}
            />

            <CloudUploadIcon
              color="primary"
              sx={{
                fontSize: 40,
                mb: 1,
                transition: theme.transitions.create(["transform"], {
                  duration: theme.transitions.duration.short,
                }),
                transform: fileHover ? "scale(1.1)" : "scale(1)",
              }}
            />

            <Typography
              variant="body1"
              fontWeight="500"
              align="center"
              gutterBottom
            >
              Drag & drop or click to import
            </Typography>

            <Typography variant="body2" color="text.secondary" align="center">
              Upload a previously saved noise configuration
            </Typography>
          </Paper>
        </Stack>
      </Box>

      <Snackbar
        open={openSnackbar}
        autoHideDuration={4000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
        TransitionComponent={Fade}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbarSeverity}
          variant="filled"
          sx={{
            width: "100%",
            borderRadius: theme.shape.borderRadius * 1.5,
            boxShadow: theme.shadows[6],
          }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Paper>
  );
};

export default ImportExportControls;

================
File: noisestack/src/components/LayerControls.jsx
================
// src/components/LayerControls.jsx
import React from "react";
import { useDispatch } from "react-redux";
import {
  updateLayer,
  deleteLayer,
  toggleLayerVisibility,
} from "../store/layersSlice";
import {
  Box,
  Typography,
  Slider,
  IconButton,
  TextField,
  Grid,
  Paper,
  Tooltip,
  Divider,
  useTheme,
  alpha,
} from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import VisibilityIcon from "@mui/icons-material/Visibility";
import VisibilityOffIcon from "@mui/icons-material/VisibilityOff";
import TuneIcon from "@mui/icons-material/Tune";

const LayerControls = ({ layer }) => {
  const dispatch = useDispatch();
  const theme = useTheme();

  const handleUpdate = (updates) => {
    dispatch(updateLayer({ id: layer.id, updates }));
  };

  const handleDelete = () => {
    dispatch(deleteLayer(layer.id));
  };

  const handleToggleVisibility = () => {
    dispatch(toggleLayerVisibility(layer.id));
  };

  return (
    <Paper
      elevation={2}
      sx={{
        p: 3,
        mb: 3,
        borderRadius: theme.shape.borderRadius * 1.5,
        border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
      }}
    >
      <Grid container spacing={2}>
        <Grid
          item
          xs={12}
          display="flex"
          justifyContent="space-between"
          alignItems="center"
          sx={{ mb: 1 }}
        >
          <Box display="flex" alignItems="center">
            <TuneIcon sx={{ mr: 1, color: theme.palette.primary.main }} />
            <Typography variant="h6" fontWeight="500">
              {layer.name}
            </Typography>
          </Box>
          <Box>
            <Tooltip title={layer.visible ? "Hide Layer" : "Show Layer"}>
              <IconButton
                onClick={handleToggleVisibility}
                size="small"
                color={layer.visible ? "primary" : "default"}
                sx={{ mr: 1 }}
              >
                {layer.visible ? <VisibilityIcon /> : <VisibilityOffIcon />}
              </IconButton>
            </Tooltip>
            <Tooltip title="Delete Layer">
              <IconButton
                onClick={handleDelete}
                size="small"
                sx={{
                  color: theme.palette.error.main,
                  "&:hover": {
                    backgroundColor: alpha(theme.palette.error.main, 0.1),
                  },
                }}
              >
                <DeleteIcon />
              </IconButton>
            </Tooltip>
          </Box>
        </Grid>

        <Grid item xs={12}>
          <Divider sx={{ mb: 2 }} />
        </Grid>

        <Grid item xs={12}>
          <Typography
            variant="body2"
            fontWeight="500"
            gutterBottom
            id={`scale-slider-${layer.id}`}
            color="text.secondary"
          >
            Scale
          </Typography>
          <Slider
            value={layer.scale}
            min={1}
            max={100}
            step={1}
            onChange={(event, value) => handleUpdate({ scale: value })}
            valueLabelDisplay="auto"
            aria-labelledby={`scale-slider-${layer.id}`}
            sx={{
              color: theme.palette.primary.main,
              height: 4,
              "& .MuiSlider-thumb": {
                width: 14,
                height: 14,
              },
            }}
          />
        </Grid>
        <Grid item xs={12}>
          <Typography
            variant="body2"
            fontWeight="500"
            gutterBottom
            id={`octaves-slider-${layer.id}`}
            color="text.secondary"
          >
            Octaves
          </Typography>
          <Slider
            value={layer.octaves}
            min={1}
            max={8}
            step={1}
            onChange={(event, value) => handleUpdate({ octaves: value })}
            valueLabelDisplay="auto"
            aria-labelledby={`octaves-slider-${layer.id}`}
            sx={{
              color: theme.palette.primary.main,
              height: 4,
              "& .MuiSlider-thumb": {
                width: 14,
                height: 14,
              },
            }}
          />
        </Grid>
        <Grid item xs={12}>
          <Typography
            variant="body2"
            fontWeight="500"
            gutterBottom
            id={`persistence-slider-${layer.id}`}
            color="text.secondary"
          >
            Persistence
          </Typography>
          <Slider
            value={layer.persistence * 100}
            min={0}
            max={100}
            step={1}
            onChange={(event, value) =>
              handleUpdate({ persistence: value / 100 })
            }
            valueLabelDisplay="auto"
            aria-labelledby={`persistence-slider-${layer.id}`}
            sx={{
              color: theme.palette.primary.main,
              height: 4,
              "& .MuiSlider-thumb": {
                width: 14,
                height: 14,
              },
            }}
          />
        </Grid>
        <Grid item xs={12}>
          <Typography
            variant="body2"
            fontWeight="500"
            gutterBottom
            id={`lacunarity-slider-${layer.id}`}
            color="text.secondary"
          >
            Lacunarity
          </Typography>
          <Slider
            value={layer.lacunarity * 100}
            min={100}
            max={300}
            step={1}
            onChange={(event, value) =>
              handleUpdate({ lacunarity: value / 100 })
            }
            valueLabelDisplay="auto"
            aria-labelledby={`lacunarity-slider-${layer.id}`}
            sx={{
              color: theme.palette.primary.main,
              height: 4,
              "& .MuiSlider-thumb": {
                width: 14,
                height: 14,
              },
            }}
          />
        </Grid>
        <Grid item xs={12}>
          <Typography
            variant="body2"
            fontWeight="500"
            gutterBottom
            color="text.secondary"
          >
            Seed
          </Typography>
          <TextField
            type="number"
            value={layer.seed}
            onChange={(e) =>
              handleUpdate({ seed: parseInt(e.target.value) || 0 })
            }
            variant="outlined"
            fullWidth
            size="small"
            InputProps={{
              sx: {
                borderRadius: theme.shape.borderRadius * 1.5,
                border: `1px solid ${alpha(theme.palette.divider, 0.2)}`,
              },
            }}
          />
        </Grid>
        <Grid item xs={12}>
          <Typography
            variant="body2"
            fontWeight="500"
            gutterBottom
            id={`weight-slider-${layer.id}`}
            color="text.secondary"
          >
            Weight
          </Typography>
          <Slider
            value={layer.weight * 100}
            min={0}
            max={100}
            step={1}
            onChange={(event, value) => handleUpdate({ weight: value / 100 })}
            valueLabelDisplay="auto"
            aria-labelledby={`weight-slider-${layer.id}`}
            sx={{
              color: theme.palette.primary.main,
              height: 4,
              "& .MuiSlider-thumb": {
                width: 14,
                height: 14,
              },
            }}
          />
        </Grid>
      </Grid>
    </Paper>
  );
};

export default LayerControls;

================
File: noisestack/src/components/LayerList.jsx
================
// src/components/LayerList.jsx
import React from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  addLayer,
  setSelectedLayerId,
  clearSelectedLayerId,
  deleteLayer,
  toggleLayerVisibility,
} from "../store/layersSlice";
import {
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  IconButton,
  ListItemSecondaryAction,
  Box,
  Typography,
  Paper,
  Button,
  Tooltip,
  useTheme,
  alpha,
} from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import LayersIcon from "@mui/icons-material/Layers";
import DeleteIcon from "@mui/icons-material/Delete";
import VisibilityIcon from "@mui/icons-material/Visibility";
import VisibilityOffIcon from "@mui/icons-material/VisibilityOff";

const LayerList = () => {
  const dispatch = useDispatch();
  const layers = useSelector((state) => state.layers.layers);
  const selectedLayerId = useSelector((state) => state.layers.selectedLayerId);
  const theme = useTheme();

  const handleAddLayer = () => {
    dispatch(
      addLayer({
        id: Date.now(),
        name: `Layer ${layers.length + 1}`,
        scale: 20,
        octaves: 3,
        persistence: 0.5,
        lacunarity: 2.0,
        seed: Math.floor(Math.random() * 1000),
        weight: 0.5,
        visible: true,
      })
    );
  };

  const handleLayerSelect = (layerId) => {
    if (selectedLayerId === layerId) {
      dispatch(clearSelectedLayerId());
    } else {
      dispatch(setSelectedLayerId(layerId));
    }
  };

  const handleDelete = (e, layerId) => {
    e.stopPropagation(); // Prevent layer selection
    dispatch(deleteLayer(layerId));
  };

  const handleToggleVisibility = (e, layerId) => {
    e.stopPropagation(); // Prevent layer selection
    dispatch(toggleLayerVisibility(layerId));
  };

  return (
    <Box>
      <Box
        display="flex"
        justifyContent="space-between"
        alignItems="center"
        mb={3}
      >
        <Typography
          variant="h6"
          fontWeight="500"
          sx={{
            display: "flex",
            alignItems: "center",
          }}
        >
          <LayersIcon
            sx={{
              mr: 1,
              color: theme.palette.primary.main,
            }}
          />
          Noise Layers
        </Typography>
        <Button
          variant="contained"
          color="primary"
          startIcon={<AddIcon />}
          onClick={handleAddLayer}
          sx={{
            borderRadius: theme.shape.borderRadius * 1.5,
            boxShadow: theme.shadows[2],
            textTransform: "none",
          }}
        >
          Add Layer
        </Button>
      </Box>
      <List sx={{ mb: 2 }}>
        {layers.map((layer) => (
          <ListItem
            key={layer.id}
            component={Paper}
            elevation={selectedLayerId === layer.id ? 3 : 1}
            sx={{
              mb: 1.5,
              p: 0,
              borderRadius: theme.shape.borderRadius * 1.5,
              transition: theme.transitions.create(
                ["box-shadow", "background-color"],
                {
                  duration: theme.transitions.duration.short,
                }
              ),
              border:
                selectedLayerId === layer.id
                  ? `1px solid ${alpha(theme.palette.primary.main, 0.5)}`
                  : `1px solid ${alpha(theme.palette.divider, 0.1)}`,
              backgroundColor:
                selectedLayerId === layer.id
                  ? alpha(theme.palette.primary.main, 0.05)
                  : theme.palette.background.paper,
              overflow: "hidden",
            }}
          >
            <ListItemButton
              onClick={() => handleLayerSelect(layer.id)}
              sx={{
                py: 1.5,
                "&:hover": {
                  backgroundColor:
                    selectedLayerId === layer.id
                      ? alpha(theme.palette.primary.main, 0.1)
                      : theme.palette.action.hover,
                },
              }}
            >
              <ListItemText
                primary={
                  <Typography
                    variant="body1"
                    fontWeight={selectedLayerId === layer.id ? 500 : 400}
                    sx={{
                      color:
                        selectedLayerId === layer.id
                          ? theme.palette.primary.main
                          : theme.palette.text.primary,
                    }}
                  >
                    {layer.name}
                  </Typography>
                }
              />
              <ListItemSecondaryAction sx={{ right: 8 }}>
                <Tooltip title={layer.visible ? "Hide Layer" : "Show Layer"}>
                  <IconButton
                    edge="end"
                    onClick={(e) => handleToggleVisibility(e, layer.id)}
                    size="small"
                    color={layer.visible ? "primary" : "default"}
                    sx={{ mr: 1 }}
                  >
                    {layer.visible ? <VisibilityIcon /> : <VisibilityOffIcon />}
                  </IconButton>
                </Tooltip>
                <Tooltip title="Delete Layer">
                  <IconButton
                    edge="end"
                    onClick={(e) => handleDelete(e, layer.id)}
                    size="small"
                    sx={{
                      color: theme.palette.error.main,
                      "&:hover": {
                        backgroundColor: alpha(theme.palette.error.main, 0.1),
                      },
                    }}
                  >
                    <DeleteIcon />
                  </IconButton>
                </Tooltip>
              </ListItemSecondaryAction>
            </ListItemButton>
          </ListItem>
        ))}
        {layers.length === 0 && (
          <Paper
            elevation={0}
            sx={{
              p: 3,
              textAlign: "center",
              border: `1px dashed ${alpha(theme.palette.divider, 0.3)}`,
              borderRadius: theme.shape.borderRadius * 1.5,
            }}
          >
            <LayersIcon
              sx={{
                fontSize: 40,
                color: alpha(theme.palette.text.secondary, 0.5),
                mb: 1,
              }}
            />
            <Typography variant="body2" color="text.secondary">
              No layers available
            </Typography>
            <Button
              variant="outlined"
              color="primary"
              startIcon={<AddIcon />}
              onClick={handleAddLayer}
              sx={{
                mt: 2,
                borderRadius: theme.shape.borderRadius * 1.5,
                textTransform: "none",
              }}
            >
              Add Your First Layer
            </Button>
          </Paper>
        )}
      </List>
    </Box>
  );
};

export default LayerList;

================
File: noisestack/src/components/NoiseVisualizer.jsx
================
// src/components/NoiseVisualization.jsx
import React, { useState, useEffect, useRef } from "react";
import * as THREE from "three";
import { OrbitControls } from "three-stdlib";
import { generatePerlinNoise } from "../utils";
import { Box } from "@mui/material";

const NoiseVisualizer = ({ layers, settings }) => {
  const canvasRef = useRef(null);
  const threeContainerRef = useRef(null);
  const [rendererInstance, setRendererInstance] = useState(null);
  const [controls, setControls] = useState(null); // Keep controls state

  const { viewMode, resolution, hypsometricTinting } = settings;

  useEffect(() => {
    // Cleanup previous instances
    if (rendererInstance) {
      rendererInstance.dispose();
      rendererInstance.forceContextLoss(); // Corrected method name
      if (rendererInstance.domElement) {
        rendererInstance.domElement.parentNode?.removeChild(
          rendererInstance.domElement
        ); //clean up dom element
      }
      setRendererInstance(null); // Clear renderer instance
    }

    if (controls) {
      // Dispose of controls
      controls.dispose();
      setControls(null);
    }

    if (viewMode === "2d") {
      render2D();
    } else {
      render3D();
    }
  }, [layers, viewMode, resolution, hypsometricTinting]);

  const render2D = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext("2d");
    if (!ctx) return; // Check if context is available

    const width = resolution;
    const height = resolution;

    ctx.clearRect(0, 0, width, height);

    const imageData = ctx.createImageData(width, height);
    const data = imageData.data;

    const visibleLayers = layers.filter((layer) => layer.visible);

    if (visibleLayers.length === 0) {
      ctx.fillStyle = "#ddd";
      ctx.fillRect(0, 0, width, height);
      ctx.fillStyle = "#999";
      ctx.font = "16px sans-serif";
      ctx.textAlign = "center";
      ctx.fillText("No visible layers", width / 2, height / 2);
      return;
    }

    const combinedNoise = new Array(width * height).fill(0);
    let totalWeight = 0;

    visibleLayers.forEach((layer) => {
      const noise = generatePerlinNoise(
        width,
        height,
        layer.scale,
        layer.octaves,
        layer.persistence,
        layer.lacunarity,
        layer.seed
      );

      for (let i = 0; i < noise.length; i++) {
        combinedNoise[i] += noise[i] * layer.weight;
      }

      totalWeight += layer.weight;
    });

    if (totalWeight > 0) {
      for (let i = 0; i < combinedNoise.length; i++) {
        combinedNoise[i] /= totalWeight;
      }
    }

    for (let i = 0; i < combinedNoise.length; i++) {
      let pixelValue = Math.floor(combinedNoise[i] * 255);
      const index = i * 4;

      if (hypsometricTinting) {
        // Apply hypsometric tinting
        if (pixelValue < 85) {
          // 0-84: Blueish
          data[index] = 0;
          data[index + 1] = 0;
          data[index + 2] = pixelValue + 170; // Blue intensity increases
        } else if (pixelValue < 170) {
          // 85-169: Greenish
          data[index] = 0;
          data[index + 1] = pixelValue + 85; // Green intensity increases
          data[index + 2] = 0;
        } else {
          // 170-255: Yellowish
          data[index] = pixelValue; // Red intensity increases
          data[index + 1] = pixelValue; // Green intensity increases
          data[index + 2] = 0;
        }
      } else {
        // Default grayscale
        data[index] = pixelValue;
        data[index + 1] = pixelValue;
        data[index + 2] = pixelValue;
      }
      data[index + 3] = 255;
    }

    ctx.putImageData(imageData, 0, 0);
  };

  const render3D = () => {
    const container = threeContainerRef.current;
    if (!container) return;

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
      75,
      resolution / resolution,
      0.1,
      1000
    );
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(resolution, resolution);
    container.appendChild(renderer.domElement);

    const visibleLayers = layers.filter((layer) => layer.visible);
    if (visibleLayers.length === 0) {
      // Display a simple plane with a message if no layers are visible.
      const geometry = new THREE.PlaneGeometry(1, 1);
      const material = new THREE.MeshBasicMaterial({ color: 0x888888 });
      const plane = new THREE.Mesh(geometry, material);
      scene.add(plane);
      camera.position.z = 1;
    } else {
      const geometry = new THREE.PlaneGeometry(
        2,
        2,
        resolution - 1,
        resolution - 1
      );

      // Combine noise from all visible layers
      const combinedNoise = new Array(resolution * resolution).fill(0);
      let totalWeight = 0;

      visibleLayers.forEach((layer) => {
        const noise = generatePerlinNoise(
          resolution,
          resolution,
          layer.scale,
          layer.octaves,
          layer.persistence,
          layer.lacunarity,
          layer.seed
        );
        for (let i = 0; i < noise.length; i++) {
          combinedNoise[i] += noise[i] * layer.weight;
        }
        totalWeight += layer.weight;
      });

      // Normalize by total weight
      if (totalWeight > 0) {
        for (let i = 0; i < combinedNoise.length; i++) {
          combinedNoise[i] /= totalWeight;
        }
      }

      for (let i = 0, l = geometry.attributes.position.count; i < l; i++) {
        const z = combinedNoise[i] * 0.2; // Scale down the Z for better visualization.  Adjust as needed
        geometry.attributes.position.setZ(i, z);
      }
      geometry.computeVertexNormals();

      const material = new THREE.MeshStandardMaterial({
        color: 0x55aa55,
        roughness: 0.7,
        metalness: 0.1,
        side: THREE.DoubleSide,
      });

      const mesh = new THREE.Mesh(geometry, material);
      scene.add(mesh);

      // Add ambient light
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
      scene.add(ambientLight);

      // Add directional light
      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
      directionalLight.position.set(1, 1, 1); // Adjust light direction
      scene.add(directionalLight);

      camera.position.z = 2;
      camera.position.y = 1;
      camera.lookAt(0, 0, 0);

      const newControls = new OrbitControls(camera, renderer.domElement); // Create new controls
      setControls(newControls); // Update controls state
    }

    setRendererInstance(renderer); // Set renderer AFTER setup
    const animate = () => {
      if (!rendererInstance) return;
      renderer.render(scene, camera);
      requestAnimationFrame(animate);
    };

    animate();
  };

  return (
    <Box sx={{ position: "relative" }}>
      {viewMode === "2d" ? (
        <canvas
          ref={canvasRef}
          width={resolution}
          height={resolution}
          style={{
            border: "1px solid",
            borderColor: "grey.400",
            borderRadius: 1,
            width: "100%", // Make it responsive
            height: "auto",
          }}
        />
      ) : (
        <Box
          ref={threeContainerRef}
          sx={{
            width: "100%", // Use 100% width, let height be determined by aspect ratio
            height: `${resolution}px`,
            border: "1px solid",
            borderColor: "grey.400",
            borderRadius: 1,
          }}
        />
      )}
    </Box>
  );
};

export default NoiseVisualizer;

================
File: noisestack/src/components/SelectedLayerControls.jsx
================
// src/components/SelectedLayerControls.jsx
import React from "react";
import { useSelector } from "react-redux";
import LayerControls from "./LayerControls";
import { Box, Typography } from "@mui/material";

const SelectedLayerControls = () => {
  const selectedLayerId = useSelector((state) => state.layers.selectedLayerId);
  const layers = useSelector((state) => state.layers.layers);
  const selectedLayer = layers.find((layer) => layer.id === selectedLayerId);

  return (
    <Box mt={4}>
      {selectedLayer ? (
        <LayerControls layer={selectedLayer} />
      ) : (
        <Typography
          variant="body2"
          color="text.secondary"
          align="center"
          mt={2}
        >
          No layer selected. Select a layer to view its controls.
        </Typography>
      )}
    </Box>
  );
};

export default SelectedLayerControls;

================
File: noisestack/src/components/ViewControls.jsx
================
// src/components/ViewControls.jsx
import React from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  setViewMode,
  setResolution,
  toggleHypsometricTinting,
} from "../store/settingsSlice";
import {
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Box,
  Typography,
  Switch,
  FormControlLabel,
  FormGroup,
  Chip,
  Divider,
  useTheme,
  alpha,
  Stack,
} from "@mui/material";
import ViewInArIcon from "@mui/icons-material/ViewInAr";
import MapIcon from "@mui/icons-material/Map";
import TuneIcon from "@mui/icons-material/Tune";
import PaletteIcon from "@mui/icons-material/Palette";
import SettingsIcon from "@mui/icons-material/Settings";

const ViewControls = () => {
  const dispatch = useDispatch();
  const { viewMode, resolution, hypsometricTinting } = useSelector(
    (state) => state.settings
  );
  const theme = useTheme();

  const handleToggleHypsometricTinting = () => {
    dispatch(toggleHypsometricTinting());
  };

  return (
    <Stack
      direction="row"
      spacing={4}
      alignItems="center"
      divider={<Divider orientation="vertical" flexItem />}
    >
      <Box display="flex" alignItems="center">
        <SettingsIcon sx={{ mr: 1.5, color: theme.palette.primary.main }} />
        <Typography variant="h6" fontWeight="500">
          View Settings
        </Typography>
      </Box>

      <FormControl sx={{ minWidth: 140 }} size="small">
        <InputLabel id="view-mode-label">View Mode</InputLabel>
        <Select
          labelId="view-mode-label"
          value={viewMode}
          label="View Mode"
          onChange={(event) => dispatch(setViewMode(event.target.value))}
          sx={{
            borderRadius: theme.shape.borderRadius * 1.5,
            "& .MuiSelect-select": {
              display: "flex",
              alignItems: "center",
            },
          }}
        >
          <MenuItem value="2d" sx={{ display: "flex", alignItems: "center" }}>
            <MapIcon
              sx={{ mr: 1, fontSize: 18, color: theme.palette.primary.main }}
            />
            2D Map
          </MenuItem>
          <MenuItem value="3d" sx={{ display: "flex", alignItems: "center" }}>
            <ViewInArIcon
              sx={{ mr: 1, fontSize: 18, color: theme.palette.primary.main }}
            />
            3D Terrain
          </MenuItem>
        </Select>
      </FormControl>

      <FormControl sx={{ minWidth: 140 }} size="small">
        <InputLabel id="resolution-label">Resolution</InputLabel>
        <Select
          labelId="resolution-label"
          value={resolution}
          label="Resolution"
          onChange={(event) =>
            dispatch(setResolution(parseInt(event.target.value)))
          }
          sx={{
            borderRadius: theme.shape.borderRadius * 1.5,
          }}
        >
          <MenuItem value={200}>200×200</MenuItem>
          <MenuItem value={400}>400×400</MenuItem>
          <MenuItem value={600}>600×600</MenuItem>
        </Select>
      </FormControl>

      <FormControlLabel
        control={
          <Switch
            checked={hypsometricTinting}
            onChange={handleToggleHypsometricTinting}
            color="primary"
          />
        }
        label={
          <Box display="flex" alignItems="center">
            <PaletteIcon
              sx={{
                mr: 1,
                fontSize: 18,
                color: hypsometricTinting
                  ? theme.palette.primary.main
                  : theme.palette.text.secondary,
              }}
            />
            <Typography
              variant="body2"
              fontWeight={hypsometricTinting ? 500 : 400}
              color={hypsometricTinting ? "primary" : "text.secondary"}
            >
              Hypsometric Tinting
            </Typography>
          </Box>
        }
      />

      <Chip
        label={viewMode === "2d" ? "2D Map View" : "3D Terrain View"}
        color="primary"
        variant="outlined"
        icon={viewMode === "2d" ? <MapIcon /> : <ViewInArIcon />}
        sx={{
          fontWeight: 500,
          border: `1px solid ${alpha(theme.palette.primary.main, 0.5)}`,
          borderRadius: theme.shape.borderRadius * 1.5,
          "& .MuiChip-icon": {
            color: theme.palette.primary.main,
          },
        }}
      />
    </Stack>
  );
};

export default ViewControls;

================
File: noisestack/src/index.js
================
// src/index.js (No changes needed here)
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { Provider } from "react-redux";
import store from "./store/store";
import { ThemeProvider, createTheme } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";
import "@fontsource/roboto/300.css";
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";

const darkTheme = createTheme({
  palette: {
    mode: "dark",
    primary: {
      main: "#90caf9", // A nice blue
    },
    secondary: {
      main: "#f48fb1", // Pink as a secondary color
    },
    background: {
      default: "#121212", // Dark background
      paper: "#1e1e1e", // Slightly lighter for Paper components
    },
  },
  typography: {
    h1: {
      fontSize: "2.5rem",
      fontWeight: 500,
      marginBottom: "1rem",
    },
    h2: {
      fontSize: "2rem",
      fontWeight: 500,
      marginBottom: "0.75rem",
    },
    h3: {
      fontSize: "1.75rem",
      fontWeight: 500,
      marginBottom: "0.5rem",
    },
    h4: {
      fontSize: "1.5rem",
      fontWeight: 500,
    },
    h5: {
      fontSize: "1.25rem",
      fontWeight: 500,
    },
    h6: {
      fontSize: "1rem",
      fontWeight: 500,
    },
    subtitle1: {
      fontSize: "1rem",
      fontWeight: 400,
    },
    body1: {
      fontSize: "1rem",
    },
    body2: {
      fontSize: "0.8rem",
    },
  },
  spacing: 8, // Default spacing unit (8px)
});

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <Provider store={store}>
      <ThemeProvider theme={darkTheme}>
        <CssBaseline />
        <App />
      </ThemeProvider>
    </Provider>
  </React.StrictMode>
);

================
File: noisestack/src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: noisestack/src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: noisestack/src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: noisestack/src/store/layersSlice.js
================
// src/store/layersSlice.js
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  layers: [
    {
      id: 1,
      name: "Base Layer",
      scale: 30,
      octaves: 4,
      persistence: 0.5,
      lacunarity: 2.0,
      seed: 42,
      weight: 1.0,
      visible: true,
    },
  ],
  selectedLayerId: null,
};

const layersSlice = createSlice({
  name: "layers",
  initialState,
  reducers: {
    addLayer: (state, action) => {
      state.layers.push(action.payload);
    },
    deleteLayer: (state, action) => {
      const layerId = action.payload;
      state.layers = state.layers.filter((layer) => layer.id !== layerId);
      // Clear selection if the deleted layer was selected
      if (state.selectedLayerId === layerId) {
        state.selectedLayerId = null;
      }
    },
    updateLayer: (state, action) => {
      const { id, updates } = action.payload;
      const layerIndex = state.layers.findIndex((layer) => layer.id === id);
      if (layerIndex !== -1) {
        state.layers[layerIndex] = { ...state.layers[layerIndex], ...updates };
      }
    },
    toggleLayerVisibility: (state, action) => {
      const layerId = action.payload;
      const layer = state.layers.find((layer) => layer.id === layerId);
      if (layer) {
        layer.visible = !layer.visible;
      }
    },
    setLayers: (state, action) => {
      // Expecting action.payload to be { layers: [...] }
      state.layers = action.payload.layers;
      state.selectedLayerId = null; // Clear selection on load
    },
    setSelectedLayerId: (state, action) => {
      state.selectedLayerId = action.payload;
    },
    clearSelectedLayerId: (state) => {
      state.selectedLayerId = null;
    },
  },
});

export const {
  addLayer,
  deleteLayer,
  updateLayer,
  toggleLayerVisibility,
  setLayers,
  setSelectedLayerId,
  clearSelectedLayerId,
} = layersSlice.actions;
export default layersSlice.reducer;

================
File: noisestack/src/store/settingsSlice.js
================
// src/store/settingsSlice.js
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  viewMode: "2d",
  resolution: 400,
  hypsometricTinting: true,
};

const settingsSlice = createSlice({
  name: "settings",
  initialState,
  reducers: {
    setViewMode: (state, action) => {
      state.viewMode = action.payload;
    },
    setResolution: (state, action) => {
      state.resolution = action.payload;
    },
    toggleHypsometricTinting: (state) => {
      state.hypsometricTinting = !state.hypsometricTinting;
    },
  },
});

export const { setViewMode, setResolution, toggleHypsometricTinting } =
  settingsSlice.actions;
export default settingsSlice.reducer;

================
File: noisestack/src/store/store.js
================
// src/store/store.js
import { configureStore } from "@reduxjs/toolkit";
import layersReducer from "./layersSlice";
import settingsReducer from "./settingsSlice";

const store = configureStore({
  reducer: {
    layers: layersReducer,
    settings: settingsReducer,
  },
});

export default store;

================
File: noisestack/src/utils.js
================
// src/utils.js
// --- Custom Perlin Noise Implementation ---

const p = new Uint8Array(512);

const grad3 = [
  [1, 1, 0],
  [-1, 1, 0],
  [1, -1, 0],
  [-1, -1, 0],
  [1, 0, 1],
  [-1, 0, 1],
  [1, 0, -1],
  [-1, 0, -1],
  [0, 1, 1],
  [0, -1, 1],
  [0, 1, -1],
  [0, -1, -1],
];

function dot(g, x, y, z) {
  return g[0] * x + g[1] * y + g[2] * z;
}

function initPermutationTable(seed = 0) {
  const rng = new Random(seed);

  const permutation = new Uint8Array(256);
  for (let i = 0; i < 256; i++) {
    permutation[i] = i;
  }

  for (let i = 255; i > 0; i--) {
    const j = Math.floor(rng.next() * (i + 1));
    [permutation[i], permutation[j]] = [permutation[j], permutation[i]];
  }

  for (let i = 0; i < 256; i++) {
    p[i] = p[i + 256] = permutation[i];
  }
}

function perlin2D(x, y, seed = 0) {
  const X = Math.floor(x) & 255;
  const Y = Math.floor(y) & 255;
  const xf = x - Math.floor(x);
  const yf = y - Math.floor(y);
  const u = fade(xf);
  const v = fade(yf);
  const A = p[X] + Y;
  const B = p[X + 1] + Y;
  const gradAA = grad(p[A], xf, yf);
  const gradBA = grad(p[B], xf - 1, yf);
  const gradAB = grad(p[A + 1], xf, yf - 1);
  const gradBB = grad(p[B + 1], xf - 1, yf - 1);
  const ix0 = lerp(gradAA, gradBA, u);
  const ix1 = lerp(gradAB, gradBB, u);
  return lerp(ix0, ix1, v);
}

function fade(t) {
  return t * t * t * (t * (t * 6 - 15) + 10);
}

function lerp(a, b, t) {
  return a + t * (b - a);
}

function grad(hash, x, y) {
  const h = hash & 15;
  const u = h < 8 ? x : y;
  const v = h < 4 ? y : h === 12 || h === 14 ? x : 0;
  return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);
}

class Random {
  constructor(seed) {
    this.seed = seed % 2147483647;
    if (this.seed <= 0) this.seed += 2147483646;
  }

  next() {
    this.seed = (this.seed * 16807) % 2147483647;
    return this.seed / 2147483647;
  }
}

export const generatePerlinNoise = (
  width,
  height,
  scale,
  octaves,
  persistence,
  lacunarity,
  seed
) => {
  initPermutationTable(seed);
  const noise = [];

  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      let nx = x / scale;
      let ny = y / scale;
      let value = 0;
      let frequency = 1;
      let amplitude = 1;
      let maxAmplitude = 0;

      for (let i = 0; i < octaves; i++) {
        value += perlin2D(nx * frequency, ny * frequency, seed) * amplitude;
        maxAmplitude += amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
      }

      noise.push((value / maxAmplitude + 1) / 2);
    }
  }
  return noise;
};



================================================================
End of Codebase
================================================================
